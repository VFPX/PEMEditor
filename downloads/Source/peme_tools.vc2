*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_tools.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS pemeditor_tools AS basecustom OF "peme_basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "editpropertydialog.h"
	*<DefinedPropArrayMethod>
		*m: beautifycode
		*m: beautifyselectstatement
		*m: closeforms
		*m: createlocals
		*m: createnewpem
		*m: editlocalmethodcode
		*m: editmethod
		*m: findclass
		*m: findobjects
		*m: findprocedure
		*m: findtopmostparent
		*m: getbeautifyxoptions
		*m: getclass
		*m: getclasslist
		*m: getcurrentfilename
		*m: getcurrentobject
		*m: getfullobjectname
		*m: gethtmlheader
		*m: getpemlist
		*m: getthis
		*m: getvariableslist
		*m: selectobject
		*m: usehighlightedtable
		*m: usehighlightedtablethisds
		*p: capplicationpath
		*p: cpluginpath
		*p: oeditorwin
		*p: outils
	*</DefinedPropArrayMethod>

	HIDDEN Height,HelpContextID,Init
	*<PropValue>
		capplicationpath = 
		cpluginpath = 
		Name = "pemeditor_tools"
		oeditorwin = .NULL.
		outils = .NULL.
		_memberdata = <VFPData>
			<memberdata name="showform" display="ShowForm"/>
			<memberdata name="createsystemmenu" display="CreateSystemMenu"/>
			<memberdata name="aboutpemeditor" display="AboutPEMEditor"/>
			<memberdata name="addmrufile" display="AddMRUFile"/>
			<memberdata name="showhelp" display="ShowHelp"/>
			<memberdata name="transferoldpreferences" display="TransferOldPreferences"/>
			<memberdata name="getmrulist" display="GetMRUList"/>
			<memberdata name="diskfilename" display="DiskFileName"/>
			<memberdata name="getrelativepath" display="GetRelativePath"/>
			<memberdata name="showerrormsg" display="ShowErrorMsg"/>
			<memberdata name="findtopmostparent" display="FindTopMostParent"/>
			<memberdata name="striptabs" display="StripTabs"/>
			<memberdata name="isnamechar" display="IsNameChar"/>
			<memberdata name="getcontrolcount" display="GetControlCount"/>
			<memberdata name="getpemstatus" display="GetPEMStatus"/>
			<memberdata name="createnewpem" display="CreateNewPEM"/>
			<memberdata name="editsourcex" display="EditSourceX"/>
			<memberdata name="editlocalmethodcode" display="EditLocalMethodCode"/>
			<memberdata name="openurl" display="OpenURL"/>
			<memberdata name="outils" display="oUtils"/>
			<memberdata name="oeditorwin" display="oEditorWin"/>
			<memberdata name="findclass" display="FindClass"/>
			<memberdata name="findprocedure" display="FindProcedure"/>
			<memberdata name="gethtmlheader" display="GetHTMLHeader"/>
			<memberdata name="closeforms" display="CloseForms"/>
			<memberdata name="findobjects" display="FindObjects"/>
			<memberdata name="getpemlist" display="GetPEMList"/>
			<memberdata name="editmethod" display="EditMethod"/>
			<memberdata name="getcurrentobject" display="GetCurrentObject"/>
			<memberdata name="getthis" display="GetThis"/>
			<memberdata name="selectobject" display="SelectObject"/>
			<memberdata name="getfullobjectname" display="GetFullObjectName"/>
			<memberdata name="beautifyselectstatement" type="method" display="BeautifySelectStatement"/>
			<memberdata name="beautifycode" type="method" display="BeautifyCode"/>
			<memberdata name="createlocals" type="method" display="CreateLocals"/>
			<memberdata name="getbeautifyxoptions" type="method" display="GetBeautifyXOptions"/>
			<memberdata name="getvariableslist" type="method" display="GetVariablesList"/>
			<memberdata name="getcurrentfilename" display="GetCurrentFileName"/>
			<memberdata name="cpluginpath" display="cPlugInPath"/>
			<memberdata name="capplicationpath" display="cApplicationPath"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE beautifycode
		Lparameters tcSelectText
		
		Return This.oUtils.oBeautifyX.BeautifyCodeBlock (tcSelectText)
		
	ENDPROC

	PROCEDURE beautifyselectstatement
		Lparameters tcSelectText, tlSemiColons
		
		Return This.oUtils.oBeautifyX.BeautifySelectCode (tcSelectText, tlSemiColons)
		
	ENDPROC

	PROCEDURE checkoutscc
		Lparameters lcFileName
		
		Return This.oUtils.CheckOutSCC (lcFileName)
	ENDPROC

	PROCEDURE closeforms
		With This.oUtils
			If 'O' = Vartype(.oPEMEditor)
				.oPEMEditor.Release()
			EndIf
			
			If 'O' = Vartype(.oDocTreeView)
				.oDocTreeView.Release()
			EndIf 
		EndWith 
		
			
	ENDPROC

	PROCEDURE createlocals
		Lparameters tcSelectText
		
		Return This.oUtils.oBeautifyX.CreateLocalsForCodeBlock(tcSelectText, 1, 1, .T.)
	ENDPROC

	PROCEDURE createnewpem
		Lparameters lcType, lcNewMethodName, lxValue, loTopOfForm, tcDescription
		
		Return This.oUtils.CreateNewPEM (lcType, lcNewMethodName, lxValue, loTopOfForm , tcDescription)
		
	ENDPROC

	PROCEDURE editlocalmethodcode
		Lparameters lcFileName, loTopOfForm, loObject, lcMethod, llClass, llDataEnvironment
		
		This.oUtils.EditLocalMethodCode (lcFileName, loTopOfForm, loObject, lcMethod, llClass, llDataEnvironment)
		
	ENDPROC

	PROCEDURE editmethod
		Lparameters toObject, tcMethodName
		
		* Parameters:
		*     toObject: an object (must be from class or form currently showing in PEME or Property Windw)
		*               .T.     == Current form or class
		*               (empty) == Current object
		*     tcMethodName: name of method to edit
		*
		
		Local lcFileName, llClass, loObject, loTopOfForm
		loObject = This.oUtils.GetOneSelectedObject()
		
		If 'O' # Vartype (loObject)
			Return ''
		Endif
		
		loTopOfForm = This.oUtils.FindTopMostParent()
		Do Case
			Case 'O' = Vartype (toObject)
				loObject = toObject
			Case Empty (toObject)
				* use current object
			Otherwise
				loObject = loTopOfForm
		Endcase
		
		With This.oUtils
			lcFileName = .cSourceFileName
			llClass	   = .lClass
		Endwith
		
		This.oUtils.EditLocalMethodCode (lcFileName, loTopOfForm, loObject, tcMethodName, llClass)
		
	ENDPROC

	PROCEDURE editsourcex
		Lparameters tcFileName, tcClass, tcMethod, tnStartRange, tnEndRange, tlCheckOutSCC
		
		Local lcMethod, lcObject, lnPos, loCurrentFile, loObject, loTopOfForm
		
		*!* * Removed 6/3/2012 / JRN
		*!* If (' ' + Upper (Justext (tcFileName)) + ' ') $ ' SCX VCX ' And Not Empty (tcMethod)
		*!* 	lcParams	 = 'tcFileName, tnStartRange, tcClass'
		*!* 	lcExpression = 'lParameters ' + lcParams + ccCR + 'Editsource(tcFileName, 0, tcClass)'
		*!* 	Execscript (lcExpression, &lcParams)
		*!* 	Declare Sleep In kernel32 Integer dwMilliseconds
		*!* 	Sleep (25)
		*!* Endif
		
		*	Assert .F.
		
		loCurrentFile = This.GetCurrentFileName()
		If (Not Empty (tcMethod))											;
				And Type ('loCurrentFile') = 'O'							;
				And Upper (tcFileName) == Upper (loCurrentFile.Filename)	;
				And Upper (Alltrim(tcClass)) == Upper (Alltrim(loCurrentFile.Class))
			loTopOfForm = This.GetCurrentObject (.T.)
		
			lcMethod = tcMethod
			*!* * Removed 1/8/2012 
			*!* If Empty (tcClass)
			*!* 	lnPos	 = At ('.', lcMethod)
			*!* 	lcMethod = Substr (lcMethod, lnPos + 1)
			*!* Endif
			
			* For forms, strip off the 'name'
			If Upper(JustExt(tcFileName)) == 'SCX'
				lnPos	 = at ('.', lcMethod)
				lcMethod = Substr(lcMethod, lnPos + 1)
			EndIf 		
		
			If '.' $ lcMethod
				lnPos	 = Rat ('.', lcMethod)
				lcObject = Left (lcMethod, lnPos - 1)
				If Type ('loTopOfForm.' + lcObject) = 'O'
					loObject = Evaluate ('loTopOfForm.' + lcObject)
				Else
					Return
				Endif
				lcMethod = Substr (lcMethod, lnPos + 1)
			Else
				loObject = loTopOfForm
				lcMethod = lcMethod
			Endif
			This.EditLocalMethodCode (tcFileName, loTopOfForm, loObject, lcMethod, Not Empty (tcClass))
		Else
			If Pcount() < 6
				DoDefault (tcFileName, tcClass, tcMethod, tnStartRange, tnEndRange)
			Else
				DoDefault (tcFileName, tcClass, tcMethod, tnStartRange, tnEndRange, tlCheckOutSCC)
			Endif
		Endif
		
		If Type ('This.oUtils.oPEMEditor') = 'O' And Vartype (This.oUtils.oPEMEditor) = 'O'
			This.oUtils.oPEMEditor.Activate()
		Endif
		
		
	ENDPROC

	PROCEDURE findclass
		Lparameters tcName
		
		If This.oEditorWin.FindWindow() >= 0
			Return This.oUtils.oIDEx.GoToDefFindClass(tcName)
		EndIf 
		
	ENDPROC

	PROCEDURE findobjects
		Lparameters tcSearchFor
		
		Return _oPEMEditor.oUtils.FindObjects (tcSearchFor)
	ENDPROC

	PROCEDURE findprocedure
		Lparameters tcName
		
		If This.oEditorWin.FindWindow() >= 0
			Return This.oUtils.oIDEx.GoToDefFindConstant(tcName)
		Endif
		
	ENDPROC

	PROCEDURE findtopmostparent
		Return This.oUtils.FindTopmostParent
	ENDPROC

	PROCEDURE getbeautifyxoptions
		Local  ;
			loPrefs AS Object
		Local lcPath, lcProperty, lcResult, lxValue
		
		Select 0
		lcPath = This.oUtils.cApplicationPath
		Use (lcPath + 'Tables\Preferences List') Alias Prefs Again Shared
		
		Select Property;
			from Prefs;
			where Group = 1;
			Order By Order, Property;
			into Cursor crsr_Properties
		
		lcResult = 'With _oPEMEditor.oPrefs'
		loPrefs = _oPEMEditor.oPrefs
		Calculate Max(Len(Alltrim(Property))) To lnLen
		
		Scan
			lcProperty = Property
			lxValue = loPrefs.&lcProperty
			lcResult = lcResult + ccCRLF + ccTAB + '.' + Left(Property, lnLen) ;
				+ ' = ' + IIF('C' = Vartype(lxValue), '[' + lxValue + ']', Transform(lxValue))
		Endscan
		
		lcResult = lcResult + ccCRLF + ccTAB + '.SaveValues()'
		lcResult = lcResult + ccCRLF + 'EndWith'
		lcResult = lcResult + ccCRLF
		
		Use in (Select ('crsr_Properties')) && Close 'crsr_Properties'
		Use in (Select ('Prefs')) && Close 'Prefs'
		
		Return lcResult
		
		
		
	ENDPROC

	PROCEDURE getclass
		Return This.oUtils.GetClass()
		
	ENDPROC

	PROCEDURE getclasslist
		Lparameters tcClass, tcFile, tlClassLibs, tlProcedures, tlProjectVCXs, tlProjectPRGs, tcFolder, tlSubFolders
		
		Return This.oUtils.GetClassList (tcClass, tcFile, tlClassLibs, tlProcedures, tlProjectVCXs, tlProjectPRGs, tcFolder, tlSubFolders)
	ENDPROC

	PROCEDURE getcurrentfilename
		Local loResult As 'Empty'
		Local laObjects[1], loTopOfForm
		
		If 0 = Aselobj (laObjects, 3)
			Return
		Endif
		
		loResult = Createobject ('Empty')
		AddProperty (loResult, 'FileName', laObjects[2])
		AddProperty (loResult, 'IncludeFile', laObjects[3])
		AddProperty (loResult, 'Class', '')
		
		If Upper (Justext (loResult.Filename)) == 'VCX'
			loTopOfForm	   = This.oUtils.FindTopMostParent()
			loResult.Class = loTopOfForm.Class
		Endif
		
		Return loResult
		
	ENDPROC

	PROCEDURE getcurrentobject
		Lparameters tlTopOfForm
		
		Return This.oUtils.GetCurrentObject(tlTopOfForm)
		
	ENDPROC

	PROCEDURE getfullobjectname
		Lparameters toObject
		
		Return this.oUtils.GetObjectPath (toObject)
		
	ENDPROC

	PROCEDURE gethtmlheader
		Return This.oUtils.oIDEx.GetHTMLHeader()
	ENDPROC

	PROCEDURE getpemlist
		Lparameters toObject, tcTypes
		
		* Parameters:
		*     toObject: an object (must be from class or form currently showing in PEME or Property Windw)
		*               .T.     == Current form or class
		*               (empty) == Current object
		*     tcTypes: one or more of 'P', 'E', or 'M'.  If not supplied, means 'all'
		*
		* Result:
		*     Collection of all PEMs for the indicated object
		
		*** DH 2023-02-11: add lnPos to LOCAL
		Local  ;
			loObject AS Object	,;
			loPEM AS Object	,;
			loPEMCollection AS 'Collection'	,;
			loTopOfForm AS Object, ;
			lnPos
		
		loPEMCollection = Createobject ('Collection')
		
		loObject = This.oUtils.GetOneSelectedObject()
		
		*** DH 2023-02-11: check if object passed
		*If 'O' # Vartype (loObject)
		If 'O' # Vartype (loObject) and vartype(toObject) <> 'O'
			Return loPEMCollection
		Endif
		
		loTopOfForm = This.oUtils.FindTopMostParent()
		Do Case
			Case 'O' = Vartype (toObject)
				loObject = toObject
			Case Empty (toObject)
				* use current object
			Otherwise
				loObject = loTopOfForm
		Endcase
		
		This.oUtils.CreatePEMList (loObject, 'crsr_PEMList')
		
		Select crsr_PEMList
		Scan
			If Empty (tcTypes) Or cType $ tcTypes
				Scatter name loPEM
		*** DH 2023-02-11: remove dimensions from arrays
				lnPos = at('[', loPEM.cName)
				if lnPos > 0
					loPEM.cName = left(loPEM.cName, lnPos - 1)
				endif lnPos > 0
		*** DH 2023-02-11: end of new code
				Try
					loPEMCollection.Add (loPem, Trim(Upper(loPEM.cName)))
				Catch
				EndTry
			Endif
		Endscan
		
		Return loPEMCollection
		
	ENDPROC

	PROCEDURE getthis
		Local loThis
		loThis = This.oUtils.GetThis()
		Return loThis
		
	ENDPROC

	PROCEDURE getvariableslist
		Lparameters tcCodeSource, tcType
		
		Return This.oUtils.oBeautifyX.GetVariablesList (tcCodeSource, tcType)
		
	ENDPROC

	HIDDEN PROCEDURE Init
		Lparameters loUtils, loEditorWin
		
		With This
			.oUtils = loUtils
			.cPlugInPath = loUtils.cPlugInPath
			.cApplicationPath = loUtils.cApplicationPath
			 
			.oEditorWin = loEditorWin
		Endwith
		
	ENDPROC

	PROCEDURE selectobject
		Lparameters toObject, lcPropertyName, tlWindowAlreadyActive
		
		Local loTopOfForm As Object
		Local  ;
			loObject As Object	,;
			loPEMEditor As Object
		
		Do Case
			Case Type('toObject') = 'O'
				loObject = toObject
			Case Type('toObject') = 'C'
				loTopOfForm = This.GetCurrentObject (.T.)
				Do Case
					Case Isnull(loTopOfForm)
						loObject = .Null.
					Case Empty(toObject)
						loObject = loTopOfForm
					Case Type('loTopOfForm.' + toObject) = 'O'
						loObject = Evaluate('loTopOfForm.' + toObject)
					Otherwise
						loObject = .Null.
				Endcase
		Endcase
		
		If Type('loObject') = 'O'
			This.oUtils.SetCurrentSelectedObject (loObject, tlWindowAlreadyActive)
			If Type('lcPropertyName') = 'C';
					and Pemstatus (loObject, lcPropertyName, 3) = 'Property'
				loPEMEditor = This.oUtils.oPEMEditor
				If Not Isnull (loPEMEditor)
					loPEMEditor.SetCurrentObjectProperty (loObject, lcPropertyName)
				Endif
			Endif
		Endif
		
		
		
	ENDPROC

	PROCEDURE usehighlightedtable
		*** JRN 2011-05-25 : Get the current highlighted text (or the name under the cursor)
		* and try to open it and select it
		
		Lparameters tnDataSession
		
		Local lcAlias, lnCurrentDataSession
		lnCurrentDataSession = Set("Datasession")
		Set DataSession To (tnDataSession)
		
		lcAlias = This.Usehighlightedtablethisds()
		
		Set DataSession To (lnCurrentDataSession)
		
		Return lcAlias
		
	ENDPROC

	PROCEDURE usehighlightedtablethisds
		*** JRN 2011-05-25 : Get the current highlighted text (or the name under the cursor)
		* and try to open it and select it
		
		Local lcAlias, lcNewAlias, lcSnippetFolder, lcThisFolder
		lcAlias = This.oUtils.oIDEx.GetCurrentHighlightedText()
		
		If Empty(lcAlias) or IsDigit(lcAlias)
			Return ''
		EndIf
		
		If Used(lcAlias)
			Select (lcAlias)
			Return lcAlias
		Endif
		
		lcNewAlias = Execscript (_Screen.cThorDispatcher, 'PEME_OpenTable', lcAlias)
		
		If Used(lcAlias)
			Select (lcAlias)
			Return lcAlias
		Else
			Return ''
		Endif
		
	ENDPROC

ENDDEFINE
