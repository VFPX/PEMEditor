*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="changefontsize.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS changefontsize AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: run		&& Occurs when an Active Document is ready to execute your application code.
		*m: update		&& Updates all objects on this form to a new font size -- changing their size and position as well
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "changefontsize"
	*</PropValue>
	
	PROCEDURE run		&& Occurs when an Active Document is ready to execute your application code.
		* Added: 06/16/2009
		*========================
		
		Lparameters tnNewFontSize, tnDefaultFontSize
		
		Local lnLeft, lnTop 
		With This
			lnTop = Thisform.Top
			lnLeft = Thisform.Left
			
			.Update ('Save Anchor', Thisform)
			.Update ('Change FontSize', Thisform, tnNewFontSize, tnDefaultFontSize)
			.Update ('Restore Anchor', Thisform)
			
			Thisform.Top = lnTop
			Thisform.Left = lnLeft
		Endwith
		
	ENDPROC

	PROCEDURE update		&& Updates all objects on this form to a new font size -- changing their size and position as well
		* Added: 06/16/2009
		*========================
		* Update procedure
		Lparameters tcStyle, toParent, tnNewFontSize, tnDefaultFontSize
		
		Local  ;
			loChild As Object	,;
			loParent As Object
		Local laPropertyNames[1], lbChangeFontsize, lcEx, lcExec, lcOriginal, lcProperty, llHidden, lnCount, lnI
		Local lnMem
		
		loParent = toParent
		
		*** JRN 06/16/09 : get count for number of children
		With loParent
			Do Case
				Case Not Pemstatus(loParent, 'Objects', 5)
					lnCount = 0
				Case Pemstatus(loParent, 'ControlCount', 5)
					lnCount = .ControlCount
				Case Inlist(Lower(.BaseClass),[pageframe])
					lnCount = .PageCount
				Case Inlist(Lower(.BaseClass),[grid])
					lnCount = .ColumnCount
				Case Inlist(Lower(.BaseClass),[optiongroup],[commandgroup])
					lnCount = .ButtonCount
				Otherwise
					lnCount = 0
			Endcase
		Endwith
		
		*** JRN 06/16/09 : Loop thru children, avoiding potential C5 errors if using For Each
		If lnCount # 0 And "O" = Type("loParent.Objects(1)")
			For lnI = 1 To lnCount
				loChild = loParent.Objects(lnI)
				This.Update (tcStyle, loChild, tnNewFontSize, tnDefaultFontSize)
			Endfor
		Endif
		
		With loParent
			Do Case
				Case tcStyle = 'Save Anchor'
					If Pemstatus (loParent, 'Anchor', 5)
						**		Naomi  and 	Ian Simcock = using the AddProperty() function and not .AddProperty Method
						AddProperty (loParent,'n_original_anchor', .Anchor)
						.Anchor = 0
					Endif
				Case tcStyle = 'Restore Anchor'
					If Pemstatus (loParent, 'Anchor', 5) And Pemstatus(loParent,'n_original_anchor',5)
						.Anchor = .n_original_anchor
					Endif
				Case tcStyle = 'Change FontSize'
		
					Alines(laPropertyNames, 'Top,Left,Height,Width,FontSize', .T., ',')
					lcExec = ".XXX = Round(.n_original_XXX * tnNewFontSize / tnDefaultFontSize, 0)"
					For Each lcProperty In laPropertyNames
						If Pemstatus (loParent, lcProperty, 5)
							lcOriginal = 'n_original_' + lcProperty
							If Not Pemstatus (loParent, lcOriginal, 5)
								AddProperty (loParent,lcOriginal, Evaluate('.' + lcProperty))
							EndIf
							lcEx = Strtran(lcExec, "XXX", lcProperty)
							&lcEx
						Endif
					Endfor
		
			Endcase
		Endwith
		
		Return
		****************************************************************
		****************************************************************
		
		* Added: 06/16/2009
		*========================
		* Update procedure
		Lparameters tcStyle, toParent, tnNewFontSize, tnDefaultFontSize
		
		*Local  ;
		loChild As Object	,;
		loParent As Object, ;
		llHidden, ;
		lnMem, ;
		lnCount, ;
		lnI, ;
		lbChangeFontsize
		
		Local Array laMembers[1]
		
		loParent = toParent
		
		*** JRN 06/16/09 : get count for number of children
		With loParent
			Do Case
				Case Not Pemstatus(loParent, 'Objects', 5)
					lnCount = 0
				Case Pemstatus(loParent, 'ControlCount', 5)
					lnCount = .ControlCount
				Case Inlist(Lower(.BaseClass),[pageframe])
					lnCount = .PageCount
				Case Inlist(Lower(.BaseClass),[grid])
					lnCount = .ColumnCount
				Case Inlist(Lower(.BaseClass),[optiongroup],[commandgroup])
					lnCount = .ButtonCount
				Otherwise
					lnCount = 0
			Endcase
		Endwith
		
		*** JRN 06/16/09 : Loop thru children, avoiding potential C5 errors if using For Each
		If lnCount # 0 And "O" = Type("loParent.Objects(1)")
			For lnI = 1 To lnCount
				loChild = loParent.Objects(lnI)
				This.Update (tcStyle, loChild, tnNewFontSize, tnDefaultFontSize)
			Endfor
		Endif
		
		If Not Pemstatus (loParent, 'Top', 5)
			Return
		Endif
		
		With loParent
			*** check for Hidden props thanks to Agnes Beste
			lnMem = 0
			lnMem=Amembers(laMembers,loParent,0,'H')
			If lnMem> 0
				llHidden = .F.
				llHidden = Iif(Ascan(laMembers,'TOP')>0,.T.,llHidden)
				llHidden = Iif(Ascan(laMembers,'LEFT')>0,.T.,llHidden)
				llHidden = Iif(Ascan(laMembers,'HEIGHT')>0,.T.,llHidden)
				llHidden = Iif(Ascan(laMembers,'WIDTH')>0,.T.,llHidden)
			Endif
			Do Case
				Case tcStyle = 'Save Anchor'
					If Pemstatus (loParent, 'Anchor', 5)
						**		Naomi  and 	Ian Simcock = using the AddProperty() function and not .AddProperty Method
						AddProperty (loParent,'n_original_anchor', .Anchor)
						.Anchor = 0
					Endif
				Case tcStyle = 'Restore Anchor'
					If Pemstatus (loParent, 'Anchor', 5) And Pemstatus(loParent,'n_original_anchor',5)
						.Anchor = .n_original_anchor
					Endif
				Case tcStyle = 'Change FontSize'
		
					lbChangeFontsize = Pemstatus (loParent, 'FontSize', 5)
					If Not Pemstatus (loParent, 'n_original_width', 5) And !llHidden
						AddProperty (loParent, 'n_original_top', .Top)
						AddProperty (loParent, 'n_original_left', .Left)
						AddProperty (loParent, 'n_original_height', .Height)
						AddProperty (loParent, 'n_original_width', .Width)
						If lbChangeFontsize
							AddProperty (loParent,'n_original_fontsize', .FontSize)
						Endif
					Endif
		
					If !llHidden
						.Top 	= .n_original_top * tnNewFontSize / tnDefaultFontSize
						.Left 	= .n_original_Left * tnNewFontSize / tnDefaultFontSize
						.Height = .n_original_Height * tnNewFontSize / tnDefaultFontSize
						.Width 	= .n_original_width * tnNewFontSize / tnDefaultFontSize
						If lbChangeFontsize
							.FontSize = .n_original_fontsize * tnNewFontSize / tnDefaultFontSize
						Endif
					Endif
		
			Endcase
		Endwith
		
	ENDPROC

ENDDEFINE
