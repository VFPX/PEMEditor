*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_foxrefengine.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS foxref AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "peme_foxref.h"
	*<DefinedPropArrayMethod>
		*m: createresultstable
		*m: filesearch
		*m: foldersearch
		*m: openresultstable
		*m: processfolder
		*m: projectsearch
		*m: restoreprefs
		*m: saveprefs
		*m: search
		*m: searchinit
		*m: setproject
		*m: updatefiletypesmru
		*m: updatefoldermru
		*m: updatelookformru
		*p: activitylog
		*p: addintable
		*p: autoprojecthomedir		&& True to search only files in Project's Home Directory or below when doing definitions automatically
		*p: backuponreplace		&& false to not backup when doing global replace
		*p: backupstyle		&& 1 = "filename.ext.bak"   2 = "Backup of filename.ext"
		*p: ccompatible
		*p: cescapestate
		*p: cexclusive
		*p: classexactmatch
		*p: classsearch
		*p: codeonly		&& search only source code & expressions (not names and other none-code items)
		*p: comments
		*p: confirmreplace		&& confirm each replacement
		*p: cprogressform
		*p: cresourcefile
		*p: cresultstable
		*p: csavelib
		*p: csaveudfparms
		*p: csetid		&& properties used internally
		*p: csys3054
		*p: ctalk
		*p: deftable
		*p: displayreplacelog		&& create activity log for replacements
		*p: errors
		*p: filedirectory
		*p: filenameexactmatch		&& exact match to file name
		*p: filetable
		*p: filetypes
		*p: findwindowclass		&& default search engine for Open Window
		*p: findwindowclasslib
		*p: fontstring
		*p: formproperties		&& search form/class property names & values
		*p: foxrefdirectory
		*p: homedir
		*p: includedeftable		&& (except for BackupStyle & FontString) create Definition table when searching
		*p: lcancel
		*p: ldefinitionsonly
		*p: lignoreerrors
		*p: liniterror
		*p: lrefreshmode
		*p: matchcase
		*p: matchclass		&& search match engines
		*p: matchclasslib
		*p: nlangopt
		*p: obackupcollection		&& collection of files we've backed up in this session
		*p: oenginecollection
		*p: ofilecollection
		*p: ofiletypecollection
		*p: ooptions
		*p: oprocessedcollection
		*p: oprogressform
		*p: oprojectfileref
		*p: oreportcollection
		*p: osearchcollection
		*p: osearchengine
		*p: overwriteprior
		*p: pattern
		*p: preservecase		&& preserve case during a Replace operation
		*p: projectfile
		*p: projecthomedir		&& True to search only files in Project's Home Directory or below
		*p: quiet		&& quiet mode -- don't display search progress
		*p: reftable
		*p: replacelogsetid		&& This is the SetID for the last Replacement Log after it's saved
		*p: reportfile
		*p: searchbaseclass
		*p: searchtype
		*p: showdistinctmethodline		&& True to show columns for method/line apart from Class
		*p: showfiletypehistory		&& True to keep filetype history in addition to showing common filetypes in search dialog
		*p: showprogress		&& show a progress form
		*p: showrefsperline		&& display a column in search results that depicts number of references found on the line
		*p: sortmostrecentfirst
		*p: subfolders
		*p: templates
		*p: ttimestamp
		*p: wholewordsonly
		*p: wildcards
		*p: wildmatchclass
		*p: wildmatchclasslib
		*p: windowfilename
		*p: windowhandle
		*p: windowlineno
		*p: xmlformat		&& XML Export Options
		*p: xmlschema
		*p: xsltemplate
		*a: aclassmru[10,0]
		*a: adefaultfiletypes[1,0]
		*a: afiletypesmru[10,0]
		*a: afoldermru[10,0]
		*a: alookformru[10,0]		&& MRU array lists
		*a: areplacemru[10,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED cprogressform,lcancel,lignoreerrors,lrefreshmode,ttimestamp
	*<PropValue>
		activitylog = 
		addintable = 
		autoprojecthomedir = .F.
		backuponreplace = .T.
		backupstyle = 1
		ccompatible = 
		cescapestate = 
		cexclusive = 
		classexactmatch = .F.
		classsearch = 
		codeonly = .F.
		comments = (COMMENTS_INCLUDE)
		confirmreplace = .T.
		cresourcefile = 
		cresultstable = 
		csavelib = 
		csaveudfparms = 
		csetid = 
		csys3054 = 
		ctalk = 
		deftable = 
		displayreplacelog = .T.
		errors = .NULL.
		filedirectory = 
		filenameexactmatch = .F.
		filetable = 
		filetypes = |
		findwindowclass = RefSearchWindow
		findwindowclasslib = FoxRefSearch_Window.prg
		fontstring = (FONT_DEFAULT)
		formproperties = .T.
		foxrefdirectory = 
		homedir = 
		includedeftable = .T.
		lcancel = .F.
		ldefinitionsonly = .F.
		lignoreerrors = .F.
		liniterror = .F.
		lrefreshmode = .F.
		matchcase = .F.
		matchclass = MatchDefault
		matchclasslib = PEME_foxmatch.vcx
		Name = "foxref"
		nlangopt = 0
		obackupcollection = .NULL.
		oenginecollection = .NULL.
		ofilecollection = .NULL.
		ofiletypecollection = .NULL.
		ooptions = .NULL.
		oprocessedcollection = .NULL.
		oprogressform = .NULL.
		oprojectfileref = .NULL.
		oreportcollection = .NULL.
		osearchcollection = .NULL.
		osearchengine = .NULL.
		overwriteprior = .T.
		pattern = 
		preservecase = .F.
		projectfile = 
		projecthomedir = .F.
		quiet = .F.
		reftable = 
		replacelogsetid = 
		reportfile = (REPORT_FILE)
		searchbaseclass = 
		searchtype = 
		showdistinctmethodline = .F.
		showfiletypehistory = .F.
		showprogress = .F.
		showrefsperline = .F.
		sortmostrecentfirst = .F.
		subfolders = .F.
		templates = 
		ttimestamp = .NULL.
		wholewordsonly = .F.
		wildcards = .F.
		wildmatchclass = MatchClass
		wildmatchclasslib = PEME_foxmatch.vcx
		windowfilename = 
		windowhandle = (-1)
		windowlineno = 0
		xmlformat = (XMLFORMAT_ELEMENTS)
		xmlschema = .T.
		xsltemplate = foxref.xsl
		_memberdata = <VFPData>
			<memberdata name="createresultstable" display="CreateResultsTable"/>
			<memberdata name="destroy" display="Destroy"/>
			<memberdata name="filesearch" display="FileSearch"/>
			<memberdata name="foldersearch" display="FolderSearch"/>
			<memberdata name="init" display="Init"/>
			<memberdata name="openresultstable" display="OpenResultsTable"/>
			<memberdata name="processfolder" display="ProcessFolder"/>
			<memberdata name="projectsearch" display="ProjectSearch"/>
			<memberdata name="restoreprefs" display="RestorePrefs"/>
			<memberdata name="saveprefs" display="SavePrefs"/>
			<memberdata name="search" display="Search"/>
			<memberdata name="searchinit" display="SearchInit"/>
			<memberdata name="setproject" display="SetProject"/>
			<memberdata name="updatefiletypesmru" display="UpdateFileTypesMRU"/>
			<memberdata name="updatefoldermru" display="UpdateFolderMRU"/>
			<memberdata name="updatelookformru" display="UpdateLookForMRU"/>
			<memberdata name="activitylog" display="ActivityLog"/>
			<memberdata name="addintable" display="AddInTable"/>
			<memberdata name="autoprojecthomedir" display="AutoProjectHomeDir"/>
			<memberdata name="backuponreplace" display="BackupOnReplace"/>
			<memberdata name="backupstyle" display="BackupStyle"/>
			<memberdata name="ccompatible" display="cCompatible"/>
			<memberdata name="cescapestate" display="cEscapeState"/>
			<memberdata name="cexclusive" display="cExclusive"/>
			<memberdata name="classexactmatch" display="ClassExactMatch"/>
			<memberdata name="classsearch" display="ClassSearch"/>
			<memberdata name="codeonly" display="CodeOnly"/>
			<memberdata name="comments" display="Comments"/>
			<memberdata name="confirmreplace" display="ConfirmReplace"/>
			<memberdata name="cprogressform" display="cProgressForm"/>
			<memberdata name="cresourcefile" display="cResourceFile"/>
			<memberdata name="cresultstable" display="cResultsTable"/>
			<memberdata name="csavelib" display="cSaveLib"/>
			<memberdata name="csaveudfparms" display="cSaveUDFParms"/>
			<memberdata name="csetid" display="cSetID"/>
			<memberdata name="csys3054" display="cSYS3054"/>
			<memberdata name="ctalk" display="cTalk"/>
			<memberdata name="deftable" display="DefTable"/>
			<memberdata name="displayreplacelog" display="DisplayReplaceLog"/>
			<memberdata name="errors" display="Errors"/>
			<memberdata name="filedirectory" display="FileDirectory"/>
			<memberdata name="filenameexactmatch" display="FileNameExactMatch"/>
			<memberdata name="filetable" display="FileTable"/>
			<memberdata name="filetypes" display="FileTypes"/>
			<memberdata name="findwindowclass" display="FindWindowClass"/>
			<memberdata name="findwindowclasslib" display="FindWindowClassLib"/>
			<memberdata name="fontstring" display="FontString"/>
			<memberdata name="formproperties" display="FormProperties"/>
			<memberdata name="foxrefdirectory" display="FoxRefDirectory"/>
			<memberdata name="homedir" display="HomeDir"/>
			<memberdata name="includedeftable" display="IncludeDefTable"/>
			<memberdata name="lcancel" display="lCancel"/>
			<memberdata name="ldefinitionsonly" display="lDefinitionsOnly"/>
			<memberdata name="lignoreerrors" display="lIgnoreErrors"/>
			<memberdata name="lignoreerrors as boolean" display="lIgnoreErrors As Boolean"/>
			<memberdata name="liniterror" display="lInitError"/>
			<memberdata name="lrefreshmode" display="lRefreshMode"/>
			<memberdata name="matchcase" display="MatchCase"/>
			<memberdata name="matchclass" display="MatchClass"/>
			<memberdata name="matchclasslib" display="MatchClassLib"/>
			<memberdata name="name" display="Name"/>
			<memberdata name="nlangopt" display="nLangOpt"/>
			<memberdata name="obackupcollection" display="oBackupCollection"/>
			<memberdata name="oenginecollection" display="oEngineCollection"/>
			<memberdata name="ofilecollection" display="oFileCollection"/>
			<memberdata name="ofiletypecollection" display="oFileTypeCollection"/>
			<memberdata name="ooptions" display="oOptions"/>
			<memberdata name="oprocessedcollection" display="oProcessedCollection"/>
			<memberdata name="oprogressform" display="oProgressForm"/>
			<memberdata name="oprojectfileref" display="oProjectFileRef"/>
			<memberdata name="oreportcollection" display="oReportCollection"/>
			<memberdata name="osearchcollection" display="oSearchCollection"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="overwriteprior" display="OverwritePrior"/>
			<memberdata name="pattern" display="Pattern"/>
			<memberdata name="preservecase" display="PreserveCase"/>
			<memberdata name="projectfile" display="ProjectFile"/>
			<memberdata name="projecthomedir" display="ProjectHomeDir"/>
			<memberdata name="quiet" display="Quiet"/>
			<memberdata name="reftable" display="RefTable"/>
			<memberdata name="replacelogsetid" display="ReplaceLogSetID"/>
			<memberdata name="reportfile" display="ReportFile"/>
			<memberdata name="searchbaseclass" display="SearchBaseClass"/>
			<memberdata name="searchtype" display="SearchType"/>
			<memberdata name="showdistinctmethodline" display="ShowDistinctMethodLine"/>
			<memberdata name="showfiletypehistory" display="ShowFileTypeHistory"/>
			<memberdata name="showprogress" display="ShowProgress"/>
			<memberdata name="showrefsperline" display="ShowRefsPerLine"/>
			<memberdata name="sortmostrecentfirst" display="SortMostRecentFirst"/>
			<memberdata name="subfolders" display="SubFolders"/>
			<memberdata name="templates" display="Templates"/>
			<memberdata name="ttimestamp" display="tTimeStamp"/>
			<memberdata name="wholewordsonly" display="WholeWordsOnly"/>
			<memberdata name="wildcards" display="Wildcards"/>
			<memberdata name="wildmatchclass" display="WildMatchClass"/>
			<memberdata name="wildmatchclasslib" display="WildMatchClassLib"/>
			<memberdata name="windowfilename" display="WindowFilename"/>
			<memberdata name="windowhandle" display="WindowHandle"/>
			<memberdata name="windowlineno" display="WindowLineNo"/>
			<memberdata name="xmlformat" display="XMLFormat"/>
			<memberdata name="xmlschema" display="XMLSchema"/>
			<memberdata name="xsltemplate" display="XSLTemplate"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE createresultstable
		This.cResultsTable = Addbs(Sys(2023)) + Sys(2015) + ".DBF"
		Select 0
		
		Create Table (This.cResultsTable) Free (	;
			SearchType		C(10),					;
			FullName		M,						;
			Class			C(128),					;
			Folder			C(120),					;
			Filename		C(120),					;
			Parent			C(128),					;
			ClassLoc		C(120),					;
			BaseClass		C(15),					;
			TimeStamp		T,						;
			StartRange      I,						;
			EndRange        I						;
			)
		
		Use
		
	ENDPROC

	PROCEDURE Destroy
		Local cCompatible
		
		Try
			Erase (This.cResultsTable)
		Catch
		
		Endtry
		
		If This.cEscapeState = "ON"
			Set Escape On
		Endif
		If This.cTalk = "ON"
			Set Talk On
		Endif
		If This.cExclusive = "ON"
			Set Exclusive On
		Endif
		Sys(3054,Int(Val(This.cSYS3054)))
		
		_vfp.LanguageOptions = This.nLangOpt
		
		If This.cSaveUDFParms = "REFERENCE"
			Set Udfparms To Reference
		Endif
		
		m.cCompatible = This.cCompatible
		Set Compatible &cCompatible
	ENDPROC

	PROCEDURE filesearch
			* Search a file
			* -- Pass an empty cPattern to only collect definitions
		LPARAMETERS cFilename, cPattern
		Local nSelect
		Local cFileFind
		Local cFolderFind
		Local nSelect
		Local lDefinitions
		Local lSearch
		Local cFileID
		Local cFileAction
		Local oEngine
		Local lSuccess
		Local nIndex
		Local cLowerFilename
		Local Array aFileList[1]
		
		If This.lCancel
			Return .F.
		Endif
		
		m.nSelect = Select()
		m.lSuccess = .T.
		
		With This.oSearchEngine
			.Filename = cFilename
			.SearchFor()
		Endwith
		Select (m.nSelect)
		
		Return m.lSuccess
	ENDPROC

	PROCEDURE foldersearch
			* -- Search a Folder
		LPARAMETERS cPattern, cFileDir
		Local i, j
		Local cFileDir
		Local nFileTypesCnt
		Local cFileTypes
		Local lAutoYield
		Local lSuccess
		Local Array aFileList[1]
		Local Array aFileTypes[1]
		
		If Vartype(cFileDir) <> 'C' Or Empty(cFileDir)
			cFileDir = Addbs(This.FileDirectory)
		Else
			cFileDir = Addbs(cFileDir)
		Endif
		
		If Empty(cFileDir) Or !Directory(cFileDir)
			Return .F.
		Endif
		
		If !This.SearchInit()
			Return .F.
		Endif
		
		lAutoYield = _vfp.AutoYield
		_vfp.AutoYield = .T.
		
		nFileTypesCnt = Alines(aFileTypes, Evl(This.Templates, '*'), .T., '|')
		lSuccess = This.ProcessFolder(cFileDir, cPattern, @aFileTypes, nFileTypesCnt)
		
		_vfp.AutoYield = lAutoYield
		
		This.UpdateLookForMRU(cPattern)
		This.UpdateFolderMRU(cFileDir)
		*!* * Removed 4/4/2013 / JRN
		*!* This.UpdateFileTypesMRU(cFileTypes)
		
		Return lSuccess
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lcResourceFile
		
		*** PRGTOVCX.CONVERT BEGIN move from class body
		THIS.aFileTypesMRU   = ''
		THIS.aFolderMRU      = ''
		THIS.aLookForMRU     = '?'
		THIS.aReplaceMRU     = ''
		*** PRGTOVCX.CONVERT END move from class body
		
		Local nSelect
		Local oException
		Local cAddInType
		Local nMemoWidth
		
		This.cTalk = Set("TALK")
		Set Talk Off
		Set Deleted On
		
		
		This.cCompatible = Set("COMPATIBLE")
		Set Compatible Off
		
		This.cExclusive = Set("EXCLUSIVE")
		Set Exclusive Off
		
		This.nLangOpt = _vfp.LanguageOptions
		_vfp.LanguageOptions = 0
		
		This.cEscapeState = Set("ESCAPE")
		Set Escape Off
		
		This.cSYS3054 = Sys(3054)
		Sys(3054,0)
		
		This.cSaveLib      = Set("LIBRARY")
		
		This.cSaveUDFParms = Set("UDFPARMS")
		Set Udfparms To Value
		
		Set Exact Off
		
		*** JRN 03/24/2010 : Resource File Name comes as parameter
		This.cResourceFile = lcResourceFile
		
		This.RestorePrefs()
		
		This.CreateResultsTable()
		
	ENDPROC

	PROCEDURE openresultstable
		Use (This.cResultsTable) Exclusive Alias ResultsTable
		Delete For SearchType = This.SearchType
		Pack
	ENDPROC

	PROCEDURE processfolder
			* used in conjuction with FolderSearch() for
			* when we're searching subfolders
		LPARAMETERS cFileDir, cPattern, aFileTypes, nFileTypesCnt
		Local nFolderCnt
		Local cFilename
		Local i, j
		Local nFileCnt
		Local nProgress
		Local lSuccess
		Local Array aFileList[1]
		Local Array aFolderList[1]
		
		cFileDir = Addbs(cFileDir)
		
		lSuccess = .T.
		
		For i = 1 To nFileTypesCnt
			If This.lCancel
				Exit
			Endif
		
			Try
				nFileCnt = Adir(aFileList, cFileDir + aFileTypes[i], '', 1)
			Catch
				nFileCnt = 0
			Endtry
			For j = 1 To nFileCnt
				If This.lCancel
					Exit
				Endif
		
				cFilename = aFileList[j, 1]
				If !This.FileSearch(cFileDir + cFilename, cPattern)
					Exit
				Endif
			Endfor
		Endfor
		
		* Process any sub-directories
		If !This.lCancel
			If This.SubFolders
				Try
					nFolderCnt = Adir(aFolderList, cFileDir + "*.*", 'D', 1)
				Catch
					nFolderCnt = 0
				Endtry
				For i = 1 To nFolderCnt
					If !aFolderList[i, 1] == '.' And !aFolderList[i, 1] == '..' And 'D'$aFolderList[i, 5] And Directory(cFileDir + aFolderList[i, 1])
						This.ProcessFolder(cFileDir + aFolderList[i, 1], cPattern, @aFileTypes, nFileTypesCnt)
					Endif
					If This.lCancel
						Exit
					Endif
				Endfor
			Endif
		Endif
		
		Return lSuccess
	ENDPROC

	PROCEDURE projectsearch
		* -- Search files in a Project
		* -- Pass an empty cPattern to only collect definitions
		Lparameters cPattern, cProjectFile
		
		Local lAutoYield, lSuccess, laTemplates[1], lnI, lnTemplateCount
		Local cFilename, cHomeDir, i, oFileRef, oProjectRef
		
		If Vartype(cProjectFile) # 'C' Or Empty(cProjectFile)
			cProjectFile = This.ProjectFile
		Endif
		
		If Not This.SearchInit()
			Return .F.
		Endif
		
		lSuccess = .T.
		
		lnTemplateCount = Alines(laTemplates, Upper(This.Templates), 5, '|')
		
		lAutoYield	   = _vfp.AutoYield
		_vfp.AutoYield = .T.
		
		For Each oProjectRef In Application.Projects
			If Upper(oProjectRef.Name) == This.ProjectFile
				cHomeDir = Addbs(Upper(oProjectRef.HomeDir))
		
				* now process each file in the project that matches our filetypes
				i = 0
				For Each oFileRef In oProjectRef.Files
					If (Not This.ProjectHomeDir Or Addbs(Upper(Justpath(oFileRef.Name))) = cHomeDir)
						cFilename = Upper(JustFname(oFileRef.Name))
						For lnI = 1 To lnTemplateCount
							If Like(laTemplates[lnI], cFilename)
								This.FileSearch(oFileRef.Name, cPattern)
								Exit
							Endif
						Endfor
					Endif
					If This.lCancel
						lSuccess = .F.
						Exit
					Endif
				Endfor
		
				Exit
			Endif
		Endfor
		
		_vfp.AutoYield = lAutoYield
		
		This.UpdateLookForMRU(cPattern)
		*!* * Removed 4/4/2013 / JRN
		*!* This.UpdateFileTypesMRU(cFileTypes)
		
		Return lSuccess
	ENDPROC

	PROCEDURE restoreprefs
			* retrieve preferences from the FoxPro Resource file
		Local nSelect
		Local lSuccess
		Local nMemoWidth
		Local i
		Local nCnt
		
		Local Array FOXREF_LOOKFOR_MRU[10]
		Local Array FOXREF_REPLACE_MRU[10]
		Local Array FOXREF_FOLDER_MRU[10]
		Local Array FOXREF_FILETYPES_MRU[10]
		Local Array FOXREF_OPTIONS[1]
		
		m.nSelect = Select()
		
		m.lSuccess = .F.
		
		*** JRN 03/24/2010 : Use This.cResourceFile instead of sys(2005)
		If File(This.cResourceFile)    && resource file not found.
			Use (This.cResourceFile) In 0 Shared Again Alias FoxResource
			If Used("FoxResource")
				m.nMemoWidth = Set('MEMOWIDTH')
				Set Memowidth To 255
		
				Select FoxResource
				Locate For Upper(Alltrim(Type)) == "PREFW" And ;
					UPPER(Alltrim(Id)) == RESOURCE_ID And ;
					EMPTY(Name) And ;
					!Deleted()
		
				If Found() And !Empty(Data) And ckval == Val(Sys(2007, Data))
					Restore From Memo Data Additive
		
					If Type("FOXREF_LOOKFOR_MRU") == 'C'
						=Acopy(FOXREF_LOOKFOR_MRU, This.aLookForMRU)
					Endif
					If Type("FOXREF_REPLACE_MRU") == 'C'
						=Acopy(FOXREF_REPLACE_MRU, This.aReplaceMRU)
					Endif
					If Type("FOXREF_FOLDER_MRU") == 'C'
						=Acopy(FOXREF_FOLDER_MRU, This.aFolderMRU)
					Endif
					If Type("FOXREF_FILETYPES_MRU") == 'C'
						=Acopy(FOXREF_FILETYPES_MRU, This.aFileTypesMRU)
					Endif
		
					If Type("FOXREF_OPTIONS") == 'C'
						m.nCnt = Alen(FOXREF_OPTIONS, 1)
						For m.i = 1 To m.nCnt
							If Vartype(FOXREF_OPTIONS[m.i, 1]) == 'C' And Pemstatus(This, FOXREF_OPTIONS[m.i, 1], 5)
								Store FOXREF_OPTIONS[m.i, 2] To ("THIS." + FOXREF_OPTIONS[m.i, 1])
							Endif
						Endfor
					Endif
		
					m.lSuccess = .T.
				Endif
		
				Set Memowidth To (m.nMemoWidth)
		
				Use In FoxResource
			Endif
		Endif
		
		Select (m.nSelect)
		
		Return m.lSuccess
	ENDPROC

	PROCEDURE saveprefs
			****************************************************************
			* Save preferences to FoxPro Resource file
		Local nSelect
		Local lSuccess
		Local nMemoWidth
		Local nCnt
		Local cData
		Local i
		Local oOptionCollection
		Local Array aFileList[1]
		Local Array FOXREF_OPTIONS[1]
		Local Array FOXREF_LOOKFOR_MRU[10]
		Local Array FOXREF_FOLDER_MRU[10]
		Local Array FOXREF_FILETYPES_MRU[10]
		
		=Acopy(This.aLookForMRU, FOXREF_LOOKFOR_MRU)
		=Acopy(This.aReplaceMRU, FOXREF_REPLACE_MRU)
		=Acopy(This.aFolderMRU, FOXREF_FOLDER_MRU)
		=Acopy(This.aFileTypesMRU, FOXREF_FILETYPES_MRU)
		
		oOptionCollection = Createobject("Collection")
		* Add any properties you want to save to
		* the resource file to this collection
		With oOptionCollection
			.Add(This.Comments, 			"Comments")
			.Add(This.MatchCase, 			"MatchCase")
			.Add(This.WholeWordsOnly, 		"WholeWordsOnly")
			.Add(This.Wildcards, 			"Wildcards")
			.Add(This.ProjectHomeDir, 		"ProjectHomeDir")
			.Add(This.SubFolders, 			"SubFolders")
			.Add(This.OverwritePrior, 		"OverwritePrior")
			.Add(This.FileTypes,			"FileTypes")
			.Add(This.IncludeDefTable, 		"IncludeDefTable")
			.Add(This.CodeOnly, 			"CodeOnly")
			.Add(This.FormProperties, 		"FormProperties")
			.Add(This.AutoProjectHomeDir, 	"AutoProjectHomeDir")
			.Add(This.ConfirmReplace, 		"ConfirmReplace")
			.Add(This.BackupOnReplace, 		"BackupOnReplace")
			.Add(This.DisplayReplaceLog, 	"DisplayReplaceLog")
			.Add(This.PreserveCase, 		"PreserveCase")
			.Add(This.BackupStyle, 			"BackupStyle")
			.Add(This.ShowRefsPerLine, 		"ShowRefsPerLine")
			.Add(This.ShowFileTypeHistory, 	"ShowFileTypeHistory")
			.Add(This.ShowDistinctMethodLine, "ShowDistinctMethodLine")
			.Add(This.SortMostRecentFirst, 	"SortMostRecentFirst")
			.Add(This.FontString, 			"FontString")
			.Add(This.FoxRefDirectory, 		"FoxRefDirectory")
		
			.Add(This.FileNameExactMatch, 	"FileNameExactMatch")
			.Add(This.ClassSearch, 			"ClassSearch")
			.Add(This.ClassExactMatch, 		"ClassExactMatch")
			.Add(This.SearchBaseClass, 		"SearchBaseClass")
			.Add(This.HomeDir, 				"HomeDir")
		Endwith
		
		Dimension FOXREF_OPTIONS[MAX(oOptionCollection.Count, 1), 2]
		For i = 1 To oOptionCollection.Count
			FOXREF_OPTIONS[m.i, 1] = oOptionCollection.GetKey(m.i)
			FOXREF_OPTIONS[m.i, 2] = oOptionCollection.Item(m.i)
		Endfor
		
		
		nSelect = Select()
		
		lSuccess = .F.
		
		* make sure Resource file exists and is not read-only
		Try
			*** JRN 03/24/2010 : Use This.cResourceFile instead of sys(2005)
			nCnt = Adir(aFileList, This.cResourceFile)
		Catch
			nCnt = 0
		Endtry
		
		If nCnt > 0 And Atcc('R', aFileList[1, 5]) == 0
			If !Used("FoxResource")
				Use (This.cResourceFile) In 0 Shared Again Alias FoxResource
			Endif
			If Used("FoxResource") And !Isreadonly("FoxResource")
				nMemoWidth = Set('MEMOWIDTH')
				Set Memowidth To 255
		
				Select FoxResource
				Locate For Upper(Alltrim(Type)) == "PREFW" And Upper(Alltrim(Id)) == RESOURCE_ID And Empty(Name)
				If !Found()
					Append Blank In FoxResource
					Replace ;
						Type With "PREFW", ;
						ID With RESOURCE_ID, ;
						ReadOnly With .F. ;
						IN FoxResource
				Endif
		
				If !FoxResource.ReadOnly
					Save To Memo Data All Like FOXREF_*
		
					Replace ;
						Updated With Date(), ;
						ckval With Val(Sys(2007, FoxResource.Data)) ;
						IN FoxResource
		
					lSuccess = .T.
				Endif
				Set Memowidth To (nMemoWidth)
		
				Use In FoxResource
			Endif
		Endif
		
		Select (nSelect)
		
		Return lSuccess
	ENDPROC

	PROCEDURE search
		Lparameters tcPattern, lShowDialog
		
		Local lSuccess, laPatterns[1], lcExtension, lcFileTypes, lcPattern, lcTemplate, lcTemplates, lnI
		Local lnPatternCount
		
		This.OpenResultsTable()
		
		lnPatternCount = Alines(laPatterns, tcPattern, 3, '|')
		lcTemplates	   = ''
		For lnI = 1 To lnPatternCount
			lcPattern	= laPatterns[lnI]
			lcExtension	= Justext(lcPattern)
			If Not Empty(lcExtension)
				lcPattern = Juststem(lcPattern)
			Endif
		
			Do Case
				Case Empty(lcPattern)
					lcTemplate = '*.'
				Case This.FileNameExactMatch
					lcTemplate = lcPattern + '.'
				Otherwise
					lcTemplate = '*' + lcPattern + '*.'
			Endcase
		
			Do Case
				Case Not Empty(lcExtension)
					lcFileTypes = '|' + Chrtran(Upper(lcExtension), ';', '|')
				Case This.SearchType = 'Class'
					lcFileTypes = '|VCX|PRG'
				Case This.SearchType = 'Form'
					lcFileTypes = '|SCX'
				Case Empty(This.FileTypes)
					lcFileTypes = '|*'
				Otherwise
					lcFileTypes = Left (This.FileTypes, Max(0, Len(This.FileTypes) - 1))
			Endcase
		
			lcTemplates = lcTemplates + Strtran (lcFileTypes, '|', '|' + lcTemplate)
		Endfor
		
		This.Templates = Substr(lcTemplates, 2)
		
		If This.SetProject(.Null., This.OverwritePrior)
			If This.ProjectFile == PROJECT_GLOBAL Or Empty(This.ProjectFile)
				lSuccess = This.FolderSearch(lcPattern)
			Else
				lSuccess = This.ProjectSearch(lcPattern)
			Endif
		
		Endif
		
		Use In ResultsTable
		
		Return lSuccess
	ENDPROC

	PROCEDURE searchinit
			* Initialize all of the search engines
			* with our search options
		Local i
		Local oException
		Local nSelect
		Local lSuccess
		
		nSelect = Select()
		
		m.oException = .Null.
		m.lSuccess = .T.
		
		Try
			If This.SearchType = 'Class'
				This.oSearchEngine = Newobject(This.WildMatchClass, This.WildMatchClassLib)
			Else
				This.oSearchEngine = Newobject(This.MatchClass, This.MatchClassLib)
			Endif
		
			This.oSearchEngine.SearchType 		= This.SearchType
			This.oSearchEngine.SearchBaseClass 	= This.SearchBaseClass
			This.oSearchEngine.ClassSearch		= This.ClassSearch
			This.oSearchEngine.ClassExactMatch	= This.ClassExactMatch
			This.oSearchEngine.SearchBaseClass	= This.SearchBaseClass
		
			*	m.lSuccess = This.oSearchEngine.InitEngine()
		Catch To oException
			m.lSuccess = .F.
			Messagebox(m.oException.Message, MB_ICONEXCLAMATION, APPNAME_LOC)
		Endtry
		
		Return m.lSuccess
	ENDPROC

	PROCEDURE setproject
			* Abstract:
			*   Set a specific project to display result sets for.
			*	Pass an empty string or "global" to display result sets
			*	that are not associated with a project.
			*
			* Parameters:
			*   [cProject]
		LPARAMETERS cProjectFile, lOverwrite
		Local lSuccess
		Local cRefTable
		Local i
		Local lFoundProject
		Local lOpened
		Local oFileRef
		Local oErr
		
		lSuccess = .F.
		
		If Vartype(cProjectFile) <> 'C'
			cProjectFile = This.ProjectFile
		Endif
		
		This.oProjectFileRef = .Null.
		If Empty(cProjectFile)
			* use the active project if a project name is not passsed
			If Application.Projects.Count > 0
				cProjectFile = Application.ActiveProject.Name
			Else
				cProjectFile = PROJECT_GLOBAL
			Endif
		
			lSuccess = .T.
		Else
			* make sure Project specified is open
			If cProjectFile == PROJECT_GLOBAL
				lSuccess = .T.
			Else
				cProjectFile = Upper(Forceext(Fullpath(cProjectFile), "PJX"))
		
				For i = 1 To Application.Projects.Count
					If Upper(Application.Projects(i).Name) == cProjectFile
						cProjectFile = Application.Projects(i).Name
						lSuccess = .T.
						Exit
					Endif
				Endfor
				If !lSuccess
					If File(cProjectFile)
						lOpened = .T.
						* open the project
						Try
							Modify Project (cProjectFile) Nowait
		
						Catch To oErr
							Messagebox(oErr.Message, MB_ICONEXCLAMATION, APPNAME_LOC)
							lOpened = .F.
						Endtry
		
						If lOpened
							* search again to find where in the Projects collection it is
							For i = 1 To Application.Projects.Count
								If Upper(Application.Projects(i).Name) == cProjectFile
									cProjectFile = Application.Projects(i).Name
									lSuccess = .T.
									Exit
								Endif
							Endfor
						Endif
					Endif
				Endif
		
			Endif
		Endif
		
		If lSuccess
			If Empty(cProjectFile) Or cProjectFile == PROJECT_GLOBAL
				This.ProjectFile = PROJECT_GLOBAL
			Else
				This.ProjectFile = Upper(cProjectFile)
				This.oProjectFileRef = Application.ActiveProject
			Endif
		
		Endif
		Return lSuccess
	ENDPROC

	PROCEDURE updatefiletypesmru
		LPARAMETERS cFileTypes
		Local nRow
		
		nRow = Ascan(This.aFileTypesMRU, cFileTypes, -1, -1, 1, 15)
		If nRow > 0
			=Adel(This.aFileTypesMRU, nRow)
		Endif
		=Ains(This.aFileTypesMRU, 1)
		This.aFileTypesMRU[1] = cFileTypes
	ENDPROC

	PROCEDURE updatefoldermru
		LPARAMETERS cFolder
		Local nRow
		
		nRow = Ascan(This.aFolderMRU, cFolder, -1, -1, 1, 15)
		If nRow > 0
			=Adel(This.aFolderMRU, nRow)
		Endif
		=Ains(This.aFolderMRU, 1)
		This.aFolderMRU[1] = cFolder
	ENDPROC

	PROCEDURE updatelookformru
		LPARAMETERS cPattern
		Local nRow
		
		nRow = Ascan(This.aLookForMRU, cPattern, -1, -1, 1, 15)
		If nRow > 0
			=Adel(This.aLookForMRU, nRow)
		Endif
		=Ains(This.aLookForMRU, 1)
		This.aLookForMRU[1] = cPattern
	ENDPROC

ENDDEFINE
