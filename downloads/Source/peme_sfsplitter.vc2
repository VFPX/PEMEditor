*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_sfsplitter.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS peme_sfsplitter AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="gripperhor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gripperver" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgDownArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgUpArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ImgRightArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ImgLeftArrow" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adjustminimum
		*m: collapse
		*m: drawcollapsearrows
		*m: getobject1size		&& Gets the size for Object 1
		*m: getobject2size		&& Gets the size for Object 2
		*m: getobjectnames		&& Populates an array from a comma-delimited list
		*m: getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		*m: lsaveanchor_assign
		*m: moveobject1		&& Moves Object 1 to the new position
		*m: moveobject2		&& Moves Object 2 to the new position
		*m: movesplittertoposition		&& Moves the splitter to the specified position
		*m: setposition		&& Sets the new position for the splitter
		*m: splittermoved		&& Called after the splitter is moved
		*p: cobject1name		&& The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
		*p: cobject2name		&& The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
		*p: ctooltiptextdownarrow
		*p: ctooltiptextleftarrow
		*p: ctooltiptextrightarrow
		*p: ctooltiptextuparrow
		*p: lcollapsed
		*p: lcollapsible
		*p: linitialized		&& .T. after the control has been initialized
		*p: lsaveanchor
		*p: lshowgripper		&& A flag to indicate if you want the Gripiper graphic image to be shown.
		*p: nanchor
		*p: nobject1minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
		*p: nobject2minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
		*p: noriginalminimum
		*p: nsavedanchor
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackColor = 192,192,192
		BackStyle = 1
		BorderColor = 255,0,0
		BorderWidth = 2
		cobject1name = 
		cobject2name = 
		ctooltiptextdownarrow = 
		ctooltiptextleftarrow = 
		ctooltiptextrightarrow = 
		ctooltiptextuparrow = 
		Height = 248
		lcollapsed = .F.
		lcollapsible = .F.
		linitialized = .F.
		lsaveanchor = .F.
		lshowgripper = .T.
		Name = "peme_sfsplitter"
		nanchor = 0
		nobject1minsize = 0
		nobject2minsize = 0
		noriginalminimum = X
		nsavedanchor = 0
		Width = 25
	*</PropValue>

	ADD OBJECT 'gripperhor' AS image WITH ;
		Height = 5, ;
		Left = 2, ;
		MousePointer = 7, ;
		Name = "gripperhor", ;
		Picture = ..\images\gripper_hor.png, ;
		Top = 24, ;
		Width = 21
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'gripperver' AS image WITH ;
		Height = 21, ;
		Left = 12, ;
		MousePointer = 9, ;
		Name = "gripperver", ;
		Picture = ..\images\gripper_ver.png, ;
		Top = 108, ;
		Width = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgDownArrow' AS image WITH ;
		BackStyle = 0, ;
		Height = 21, ;
		Left = 2, ;
		Name = "imgDownArrow", ;
		Picture = ..\images\dnarrow.bmp, ;
		Top = 174, ;
		Width = 21
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'ImgLeftArrow' AS image WITH ;
		BackStyle = 0, ;
		Height = 17, ;
		Left = 3, ;
		Name = "ImgLeftArrow", ;
		Picture = ..\images\left.bmp, ;
		Top = 58, ;
		Width = 17
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'ImgRightArrow' AS image WITH ;
		BackStyle = 0, ;
		Height = 17, ;
		Left = 3, ;
		Name = "ImgRightArrow", ;
		Picture = ..\images\right.bmp, ;
		Top = 39, ;
		Width = 17
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgUpArrow' AS image WITH ;
		BackStyle = 0, ;
		Height = 21, ;
		Left = 2, ;
		Name = "imgUpArrow", ;
		Picture = ..\images\uparrow.bmp, ;
		Top = 193, ;
		Width = 21
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE adjustminimum
	ENDPROC

	PROCEDURE collapse
		Lparameters lbCollapse
		
		
	ENDPROC

	PROCEDURE drawcollapsearrows
		With This.ImgDownArrow
			If PEME_IsVersion9()
				.Anchor=0
				.Left= .Width
				.Top= (This.Height-.Height)/2 - 2
				.Anchor=10
			Else
				.Left=(This.Width-.Width)/2
				.Top=(This.Height-.Height)/2
			Endif
			.Visible=(This.Width>This.Height) And This.lCollapsible and Not This.lCollapsed 
		Endwith
		
		
		With This.ImgUpArrow
			If PEME_IsVersion9()
				.Anchor=0
				.Left= .Width
				.Top= (This.Height-.Height)/2 + 2
				.Anchor=10
			Else
				.Left=(This.Width-.Width)/2
				.Top=(This.Height-.Height)/2
			Endif
			.Visible=(This.Width>This.Height) And This.lCollapsible and This.lCollapsed 
		Endwith
		
		
		****************************************************************
		****************************************************************
		With This.ImgRightArrow
			If PEME_IsVersion9()
				.Anchor=0
				.Left= (This.Width-.Width)/2 - 2
				.Top= 5
				.Anchor=10
			Else
				.Left= (This.Width-.Width)/2 - 2
				.Top= .Height
			Endif
			.Visible=(This.Width<This.Height) And This.lCollapsible and Not This.lCollapsed 
		Endwith
		
		
		With This.ImgLeftArrow
			If PEME_IsVersion9()
				.Anchor=0
				.Left= (This.Width-.Width)/2 + 1
				.Top= 5
				.Anchor=10
			Else
				.Left= (This.Width-.Width)/2 + 1
				.Top= .Height
			Endif
			.Visible=(This.Width<This.Height) And This.lCollapsible and This.lCollapsed 
		Endwith
		
		
		
	ENDPROC

	PROTECTED PROCEDURE getobject1size		&& Gets the size for Object 1
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobject2size		&& Gets the size for Object 2
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobjectnames		&& Populates an array from a comma-delimited list
		lparameters tcList, ;
			taArray
		local lnOccurs, ;
			lnStart, ;
			lnI, ;
			lnPos
		lnOccurs = occurs(',', tcList) + 1
		dimension taArray[lnOccurs]
		lnStart = 1
		for lnI = 1 to lnOccurs
			if lnI = lnOccurs
				lnPos = len(tcList) + 1
			else
				lnPos = at(',', tcList, lnI)
			endif lnI = lnOccurs
			taArray[lnI] = alltrim(substr(tcList, lnStart, lnPos - lnStart))
			lnStart = lnPos + 1
		next lnI
		return lnOccurs
		
	ENDPROC

	PROTECTED PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		* Abstract method.
		
		lparameters tnXCoord, ;
			tnYCoord
		
	ENDPROC

	PROCEDURE Init
		* Make the border invisible and flag that Init has fired.
		
		with This
			.BorderWidth  = 0
			.lInitialized = .T.
			.Resize() && Added by Matt Slay - 2008-12-24
		endwith
		dodefault()
		
		*!*	Other notes regarding changes by Matt Slay 2008-12-24:
		*!*  Revised to add dots graphic images on the splitter bar.
		*!*	 All changes were to the main sfplitter control only.
		*!*	 Added a horizontal and vertical gripper image.
		*!*	 Set BackStyle to Opaque.
		*!*	 Set BackColor to 192,192,192
		*!*	 Added code to the Resize() event to keep the Grippers centered and hide/show the correct
		*!*	 gripper image for vertical vs. horizontal splitters
		*!*	 Images pick up ToolTip from parent sfsplitter in gripper.MouseEnter() event.
		*!*	 Images pass their MouseMove() event to parent sfsplitter.MouseMove() event.
		*!*	 Added a property to the sfplitter base class called lShowGripper that let's you turn it on
		*!*	 or off for each instance of splitter in you app. The default is .T.
		*!*	 So, the gripper graphics are color matched to the 192,192,192.
		*!*	 Any change of the spliiter BackColor would require making new Gripper images with the matching
		*!*	 colors. Not hard to do.
		
		If PEME_IsVersion9()
			This.Anchor = this.nAnchor 
		EndIf 
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			Case not PEME_IsVersion9()
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		with This
			if tnButton = 1 and .Enabled
				lnPosition = .GetPosition(tnXCoord, tnYCoord)
				.MoveSplitterToPosition(lnPosition)
			endif tnButton = 1 ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE moveobject1		&& Moves Object 1 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE moveobject2		&& Moves Object 2 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROCEDURE movesplittertoposition		&& Moves the splitter to the specified position
		* Move the splitter to the specified position. Ensure it doesn't go too far,
		* based on the nObject1MinSize and nObject2MinSize settings.
		
		Lparameters tnPosition
		Local lnPosition, ;
			laObjects[1], ;
			lnObjects, ;
			lnI, ;
			loObject, ;
			lnAnchor
		With This
			lnPosition = tnPosition
			lnObjects  = .GetObjectNames(.cObject1Name, @laObjects)
			For lnI = 1 To lnObjects
				loObject   = Evaluate('.Parent.' + laObjects[lnI])
				lnPosition = Max(lnPosition, .GetObject1Size(loObject))
			Next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			For lnI = 1 To lnObjects
				loObject   = Evaluate('.Parent.' + laObjects[lnI])
				lnPosition = Min(lnPosition, .GetObject2Size(loObject))
			Next lnI
		
			.lSaveAnchor = .T.
			.SetPosition(lnPosition)
			.lSaveAnchor = .F.
		
			* Now move the left and right objects as well.
		
			lnObjects = .GetObjectNames(.cObject1Name, @laObjects)
			For lnI = 1 To lnObjects
				loObject = Evaluate('.Parent.' + laObjects[lnI])
				With loObject
					.lSaveAnchor = .T.
					This.MoveObject1(loObject)
					.lSaveAnchor = .F.
				Endwith
			Next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			For lnI = 1 To lnObjects
				loObject = Evaluate('.Parent.' + laObjects[lnI])
				With loObject
					.lSaveAnchor = .T.
					This.MoveObject2(loObject)
					.lSaveAnchor = .F.
				Endwith
			Next lnI
		
			* Call hook methods.
		
			.AdjustMinimum()
		
			.SplitterMoved()
		Endwith
		
	ENDPROC

	PROCEDURE Resize
		With This
			*!*		.Collapse (.F.)
			.DrawCollapseArrows()
		Endwith
		
		With This.gripperhor
			If PEME_IsVersion9()
				.Anchor=0
				.Left=(This.Width-.Width)/2
				.Top=(This.Height-.Height)/2
				.Anchor=10
			Else
				.Left=(This.Width-.Width)/2
				.Top=(This.Height-.Height)/2
			Endif
			.Visible=(This.Width>This.Height) And This.lShowGripper=.T.
		Endwith
		
		
		With This.gripperver
			If PEME_IsVersion9()
				.Anchor=0
				.Top=(This.Height-.Height)/2
				.Left=(This.Width-.Width)/2
				.Anchor=5
			Else
				.Top=(This.Height-.Height)/2
				.Left=(This.Width-.Width)/2
			Endif
			.Visible=(This.Width<This.Height) And This.lShowGripper=.T.
		Endwith
		
		DoDefault()
		
	ENDPROC

	PROTECTED PROCEDURE setposition		&& Sets the new position for the splitter
		* Abstract method.
		
		lparameters tnPosition
		
	ENDPROC

	PROCEDURE splittermoved		&& Called after the splitter is moved
		* Abstract method.
		
	ENDPROC

	PROCEDURE gripperhor.Init
		If PEME_IsVersion9()
			This.Anchor = 10
		EndIf 
		
	ENDPROC

	PROCEDURE gripperhor.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.ToolTipText
		
	ENDPROC

	PROCEDURE gripperhor.MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		
		this.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
		
	ENDPROC

	PROCEDURE gripperver.Init
		If PEME_IsVersion9()
			This.Anchor = 5
		EndIf 
		
	ENDPROC

	PROCEDURE gripperver.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.ToolTipText
		
	ENDPROC

	PROCEDURE gripperver.MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		
		this.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
		
	ENDPROC

	PROCEDURE imgDownArrow.Click
		With This.Parent
			.Collapse (.T.)
			.Refresh()
		EndWith 
	ENDPROC

	PROCEDURE imgDownArrow.Init
		If PEME_IsVersion9()
			This.Anchor = 5
		EndIf 
		
	ENDPROC

	PROCEDURE imgDownArrow.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.cToolTipTextDownArrow 
	ENDPROC

	PROCEDURE ImgLeftArrow.Click
		With This.Parent
			.Collapse (.F.)
			.Refresh()
		EndWith 
	ENDPROC

	PROCEDURE ImgLeftArrow.Init
		If PEME_IsVersion9()
			This.Anchor = 5
		EndIf 
		
	ENDPROC

	PROCEDURE ImgLeftArrow.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.cToolTipTextLeftArrow 
	ENDPROC

	PROCEDURE ImgRightArrow.Click
		With This.Parent
			.Collapse (.T.)
			.Refresh()
		EndWith 
	ENDPROC

	PROCEDURE ImgRightArrow.Init
		If PEME_IsVersion9()
			This.Anchor = 5
		EndIf 
		
	ENDPROC

	PROCEDURE ImgRightArrow.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.cToolTipTextRightArrow 
	ENDPROC

	PROCEDURE imgUpArrow.Click
		With This.Parent
			.Collapse (.F.)
			.Refresh()
		EndWith 
	ENDPROC

	PROCEDURE imgUpArrow.Init
		If PEME_IsVersion9()
			This.Anchor = 5
		EndIf 
		
	ENDPROC

	PROCEDURE imgUpArrow.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.ToolTipText=this.Parent.cToolTipTextUpArrow 
	ENDPROC

ENDDEFINE

DEFINE CLASS peme_sfsplitterh AS peme_sfsplitter OF "peme_sfsplitter.vcx" 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		MousePointer = 9
		Name = "peme_sfsplitterh"
		nanchor = 13
		gripperhor.Height = 5
		gripperhor.Name = "gripperhor"
		gripperhor.Width = 21
		gripperver.Height = 21
		gripperver.Name = "gripperver"
		gripperver.Width = 5
		imgDownArrow.Height = 21
		imgDownArrow.Name = "imgDownArrow"
		imgDownArrow.Width = 21
		imgUpArrow.Height = 21
		imgUpArrow.Name = "imgUpArrow"
		imgUpArrow.Width = 21
		ImgRightArrow.Height = 17
		ImgRightArrow.Name = "ImgRightArrow"
		ImgRightArrow.Width = 17
		ImgLeftArrow.Height = 17
		ImgLeftArrow.Name = "ImgLeftArrow"
		ImgLeftArrow.Width = 17
	*</PropValue>
	
	PROCEDURE adjustminimum
		* Don't allow the form to be sized smaller than the left object should be.
		
		local laObjects[1], ;
			lnObjects, ;
			lnWidth, ;
			lnI, ;
			loObject
		with This
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			lnWidth   = -1
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnWidth  = max(lnWidth, loObject.Width)
			next lnI
			If 'N' # Vartype (This.nOriginalMinimum)
				This.nOriginalMinimum = Thisform.MinWidth
			EndIf 
			Thisform.MinWidth = max(This.nOriginalMinimum, Thisform.Width - lnWidth + ;
				.nObject1MinSize)
		endwith
		
	ENDPROC

	PROCEDURE getobject1size		&& Gets the size for Object 1
		lparameters toObject
		return toObject.Left + This.nObject1MinSize
		
	ENDPROC

	PROCEDURE getobject2size		&& Gets the size for Object 2
		lparameters toObject
		return toObject.Left + toObject.Width - This.nObject2MinSize - This.Width
		
	ENDPROC

	PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		lparameters tnXCoord, ;
			tnYCoord
		return tnXCoord + This.Left - Objtoclient(this,2)
		
	ENDPROC

	PROCEDURE moveobject1		&& Moves Object 1 to the new position
		lparameters toObject
		with toObject
			.Move(.Left, .Top, This.Left - .Left, .Height)
		endwith
		
	ENDPROC

	PROCEDURE moveobject2		&& Moves Object 2 to the new position
		lparameters toObject
		with toObject
			.Move(This.Left + This.Width, .Top, max(.Width + .Left - This.Left - ;
				This.Width, 0), .Height)
		endwith
		
	ENDPROC

	PROCEDURE setposition		&& Sets the new position for the splitter
		lparameters tnPosition
		This.Left = tnPosition
		
	ENDPROC

ENDDEFINE

DEFINE CLASS peme_sfsplitterv AS peme_sfsplitter OF "peme_sfsplitter.vcx" 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Height = 10
		MousePointer = 7
		Name = "peme_sfsplitterv"
		nanchor = 14
		Width = 200
		gripperhor.Height = 5
		gripperhor.Name = "gripperhor"
		gripperhor.Width = 21
		gripperver.Height = 21
		gripperver.Name = "gripperver"
		gripperver.Width = 5
		imgDownArrow.Height = 21
		imgDownArrow.Name = "imgDownArrow"
		imgDownArrow.Width = 21
		imgUpArrow.Height = 21
		imgUpArrow.Name = "imgUpArrow"
		imgUpArrow.Width = 21
		ImgRightArrow.Height = 17
		ImgRightArrow.Name = "ImgRightArrow"
		ImgRightArrow.Width = 17
		ImgLeftArrow.Height = 17
		ImgLeftArrow.Name = "ImgLeftArrow"
		ImgLeftArrow.Width = 17
	*</PropValue>
	
	PROCEDURE adjustminimum
		* Don't allow the form to be sized smaller than the top object should be.
		
		local laObjects[1], ;
			lnObjects, ;
			lnHeight, ;
			lnI, ;
			loObject
		with This
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			lnHeight  = -1
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnHeight = max(lnHeight, loObject.Height)
			next lnI
			If 'N' # Vartype (This.nOriginalMinimum)
				This.nOriginalMinimum = Thisform.MinHeight
			EndIf 
			Thisform.MinHeight = max(This.nOriginalMinimum, Thisform.Height - lnHeight + ;
				.nObject1MinSize)
		endwith
		
	ENDPROC

	PROCEDURE getobject1size		&& Gets the size for Object 1
		lparameters toObject
		return toObject.Top + This.nObject1MinSize
		
	ENDPROC

	PROCEDURE getobject2size		&& Gets the size for Object 2
		lparameters toObject
		return toObject.Top + toObject.Height - This.nObject2MinSize - This.Height
		
	ENDPROC

	PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		lparameters tnXCoord, ;
			tnYCoord
		return tnYCoord + This.Top - Objtoclient(this,1)
		
	ENDPROC

	PROCEDURE moveobject1		&& Moves Object 1 to the new position
		lparameters toObject
		with toObject
			.Move(.Left, .Top, .Width, This.Top - .Top)
		endwith
		
	ENDPROC

	PROCEDURE moveobject2		&& Moves Object 2 to the new position
		lparameters toObject
		with toObject
			.Move(.Left, This.Top + This.Height, .Width, max(.Height + .Top - This.Top - ;
				This.Height, 0))
		endwith
		
	ENDPROC

	PROCEDURE setposition		&& Sets the new position for the splitter
		lparameters tnPosition
		This.Top = tnPosition
		
	ENDPROC

ENDDEFINE
