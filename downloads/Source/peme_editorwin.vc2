*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_editorwin.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS editorwin AS basecustom OF "peme_basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "editpropertydialogenglish.h"
	*<DefinedPropArrayMethod>
		*m: closewindow
		*m: copy
		*m: cut
		*m: ensurevisible		&& Ensures the given offset is visible
		*m: findlastwindow
		*m: findwindow
		*m: fromint
		*m: getbyteoffset
		*m: getcaretcoordinates
		*m: getcaretposition
		*m: getcharacter
		*m: getclientwindow
		*m: getcurrentwindow
		*m: geteditsource
		*m: getenvironment
		*m: getfilesize
		*m: getheight
		*m: getleft
		*m: getlinenumber		&& Returns the line number given the byte offset
		*m: getlinestart
		*m: getopenwindows
		*m: getpopupcoordinates
		*m: getselend
		*m: getselstart
		*m: getstring
		*m: gettitle
		*m: gettop
		*m: getwidth
		*m: getwindowhandle
		*m: movewindow
		*m: paste
		*m: resizewindow
		*m: select
		*m: selectwindow
		*m: sethandle
		*m: setinsertionpoint		&& Moves the insertion point to a given offset (not necessarily visible)
		*m: settitle
		*m: showposition
		*m: skipline
		*m: winshow
		*p: nhandle
		*p: nsessiontype
		*p: ofoxtabs
	*</DefinedPropArrayMethod>

	HIDDEN Height,HelpContextID
	*<PropValue>
		Name = "editorwin"
		nhandle = 0
		nsessiontype = 0
		ofoxtabs = .NULL.
		_memberdata = <VFPData>
			<memberdata name="nhandle" display="nHandle"/>
			<memberdata name="nsessiontype" display="nSessionType"/>
			<memberdata name="cut" display="Cut"/>
			<memberdata name="findlastwindow" display="FindLastWindow"/>
			<memberdata name="findwindow" display="FindWindow"/>
			<memberdata name="getcharacter" display="GetCharacter"/>
			<memberdata name="getopenwindows" display="GetOpenWindows"/>
			<memberdata name="getselend" display="GetSelEnd"/>
			<memberdata name="getselstart" display="GetSelStart"/>
			<memberdata name="getstring" display="GetString"/>
			<memberdata name="gettitle" display="GetTitle"/>
			<memberdata name="getwindowhandle" display="GetWindowHandle"/>
			<memberdata name="movewindow" display="MoveWindow"/>
			<memberdata name="paste" display="Paste"/>
			<memberdata name="resizewindow" display="ResizeWindow"/>
			<memberdata name="settitle" display="SetTitle"/>
			<memberdata name="skipline" display="SkipLine"/>
			<memberdata name="winshow" display="WinShow"/>
			<memberdata name="getenvironment" display="GetEnvironment"/>
			<memberdata name="ofoxtabs" display="oFoxTabs"/>
			<memberdata name="selectwindow" display="SelectWindow"/>
			<memberdata name="closewindow" display="CloseWindow"/>
			<memberdata name="getleft" display="GetLeft"/>
			<memberdata name="gettop" display="GetTop"/>
			<memberdata name="getwidth" display="GetWidth"/>
			<memberdata name="getheight" display="GetHeight"/>
			<memberdata name="setinsertionpoint" display="SetInsertionPoint"/>
			<memberdata name="showposition" display="ShowPosition"/>
			<memberdata name="getfilesize" display="GetFileSize"/>
			<memberdata name="getlinenumber" display="GetLineNumber"/>
			<memberdata name="getlinestart" display="GetLineStart"/>
			<memberdata name="getbyteoffset" display="GetByteOffset"/>
			<memberdata name="ensurevisible" display="EnsureVisible"/>
			<memberdata name="sethandle" display="SetHandle"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE closewindow
		Lparameters lnHandle
		
		_WClose (lnHandle)
	ENDPROC

	PROCEDURE copy
		_EdCopy (This.nHandle)
		
	ENDPROC

	PROCEDURE cut
		_EdCut (This.nHandle)
		
	ENDPROC

	PROCEDURE Destroy
		This.Release()
	ENDPROC

	PROCEDURE ensurevisible		&& Ensures the given offset is visible
		* Ensures the given offset is visible
		Lparameters lnPosition, lScroll
		
		_EdStoPos(This.nHandle, lnPosition, lScroll)
		
		
	ENDPROC

	PROCEDURE findlastwindow
		Local lnI, loWindows
		loWindows = This.GetOpenWindows()
		
		For lnI = 1 To loWindows.Count
			If loWindows (lnI).nWHandleType > 0 or (loWindows (lnI).nWHandleType = 0 and loWindows (lnI).WindowName == 'Command')
				This.nHandle	  = loWindows (lnI).nWHandle
				This.nSessionType = loWindows (lnI).nWHandleType
				Return This.nSessionType
			Endif
		Endfor
		
		Return -1
		
	ENDPROC

	PROCEDURE findwindow
		*	Result:
		*		0 – Command Window
		*		1 – Program file (MODIFY COMMAND)
		*		2 – Text Editor (MODIFY FILE)
		*		8 – Menu code edit window
		*	   10 – Method code edit window of the Class or Form Designer
		*	   12 – Stored procedure in a DBC (MODIFY PROCEDURE)
		*	   -1 - Failed
		
		Local lnResult
		
		This.nHandle = This.GetWindowHandle()
		lnResult	 = This.GetEnvironment(25)
		
		If 'N' # Vartype(lnResult)
			This.nHandle = 0
			Return -1
		Else
			This.nSessionType = lnResult
			Return lnResult
		Endif
		
	ENDPROC

	PROCEDURE fromint
		Parameter tcString
		Private nValue, nT
		nValue = 0
		For nT = 1 To Len (tcString)
			nValue = nValue + Asc (Substr (tcString, nT, 1)) * 256^ (nT - 1)
		Endfor
		Return nValue
		
	ENDPROC

	PROCEDURE getbyteoffset
		* Returns the byte offset of the beginning of a line, given the line number
		Lparameters lnSelStart
		
		Return _EdGetLPos(This.nHandle, lnSelStart)
		 
	ENDPROC

	PROCEDURE getcaretcoordinates
		*========================================================================================
		*
		* Original code from ISX.Com (Christof)
		*
		* Version: 2010-02Feb-20
		*
		*========================================================================================
		*
		
		*-----------------------------------------------------------------
		* Make sure, FoxTools.Fll is loaded.
		*-----------------------------------------------------------------
		Local loResult As 'Empty'
		Local lnEditSource, lnLeft, lnTop, lnWHandle
		
		If Not 'FOXTOOLS.FLL' $ Upper (Set ('Library'))
			Set Library To (Home() + 'FoxTools.Fll') Additive
		Endif
		
		*-----------------------------------------------------------------
		* Get the current window and verify that it is a valid window.
		*-----------------------------------------------------------------
		lnWHandle = This.GetCurrentWindow()
		If lnWHandle == 0
			Return
		Endif
		
		*-----------------------------------------------------------------
		* Verify that the current window is indeed an edit window.
		*-----------------------------------------------------------------
		lnEditSource = This.GetEditSource (m.lnWHandle)
		If Not Inlist ( m.lnEditSource, 1, 8, 10, 12 )
			Return
		Endif
		
		*------------------------------------------------------------------
		* If called from within Thor which used InKey, use center of window
		*------------------------------------------------------------------
		
		If 'L' = Type ('_Screen.lThorInkey') And _Screen.lThorInkey
			lnTop = _WTopP(m.lnWHandle) + Floor(_WHeightP(m.lnWHandle) / 2)
			lnLeft = _WLeftP(m.lnWHandle) + Floor(_WWidthP(m.lnWHandle) / 5)
			
			loResult = Createobject ('Empty')
			AddProperty (loResult, 'Top',    lnTop)
			AddProperty (loResult, 'Left',   lnLeft)
			AddProperty (loResult, 'Source', 'Center')
			Return loResult
		Endif
		
		*-----------------------------------------------------------------
		* Get the current caret position
		*-----------------------------------------------------------------
		If Not This.GetCaretPosition (m.lnWHandle, @lnTop, @lnLeft )
			Return .F.
		Endif
		
		loResult = Createobject ('Empty')
		AddProperty (loResult, 'Top',    lnTop)
		AddProperty (loResult, 'Left',   lnLeft)
		AddProperty (loResult, 'Source', 'Caret')
		Return loResult
		
	ENDPROC

	PROCEDURE getcaretposition
		*====================================================================
		* Returns the position of the text cursor (caret) in _SCREEN coordi-
		* nates. If the window identified by the passed window handle doesn't
		* have the focus, or the position can't be determined, this function
		* returns .F.
		*====================================================================
		
		Lparameter tnWHandle, rnTop, rnLeft
		
		*-----------------------------------------------------------------
		* Check whether this window has got the focus.
		*-----------------------------------------------------------------
		Declare Integer GetFocus In Win32API
		If GetFocus() # _WhToHWND ( m.tnWHandle )
			Return .F.
		EndIf
		
		*-----------------------------------------------------------------
		* Determine the cursor position. This position is relative to the
		** OK
		* client area of the editing subwindow of the actual editing win-
		* dow.
		*-----------------------------------------------------------------
		Local lnLeft, lnTop, lcPOINT
		Declare Integer GetCaretPos In Win32API String@
		lcPOINT = Space(8)
		If GetCaretPos ( @lcPOINT ) == 0
			lnLeft = Mcol(3)
			lnTop  = Mrow(3)
		Else
			lnLeft = Asc (Left (m.lcPOINT, 1)) + 256 * Asc (Substr (m.lcPOINT, 2, 1))
			lnTop  = Asc (Substr (m.lcPOINT, 5, 1)) + 256 * Asc (Substr (m.lcPOINT, 6, 1))
		Endif
		
		*-----------------------------------------------------------------
		* To convert this postion to _SCREEN coordinates, we have to
		* determine the position of the client window relative to the
		* desktop window and correlate this with the absolute position of
		* the _SCREEN window. Hence, we need first the HWNDs of both
		* windows.
		*-----------------------------------------------------------------
		Local lnChild, lnScreen
		Declare Integer GetParent In Win32API Integer
		lnChild = This.GetClientWindow ( m.tnWHandle )
		If m.lnChild == 0
			Return .F.
		Endif
		lnScreen = GetParent ( _WhToHWND (m.tnWHandle) )
		If m.lnScreen == 0
			Return .F.
		Endif
		
		*-----------------------------------------------------------------
		* Now we can determine the position of both windows.
		*-----------------------------------------------------------------
		Local lnChildTop, lnChildLeft, lnScreenTop, lnScreenLeft, lcRect
		lcRect = Replicate ( Chr(0), 16 )
		Declare Integer GetWindowRect In Win32API Long, String@
		GetWindowRect ( m.lnChild, @lcRect )
		lnChildLeft	= This.FromInt ( Left (m.lcRect, 4) )
		lnChildTop	= This.FromInt ( Substr (m.lcRect, 5, 4) )
		GetWindowRect ( m.lnScreen, @lcRect )
		lnScreenLeft = This.FromInt ( Left (m.lcRect, 4) )
		lnScreenTop	 = This.FromInt ( Substr (m.lcRect, 5, 4) )
		
		*-----------------------------------------------------------------
		* Now combine the position of the edit window and the cursor
		* position.
		*-----------------------------------------------------------------
		rnLeft = m.lnLeft + m.lnChildLeft - m.lnScreenLeft
		rnTop  = m.lnTop + m.lnChildTop - m.lnScreenTop
		
	ENDPROC

	PROCEDURE getcharacter
		Lparameters lnSelStart
		
		Return _EdGetChar (This.nHandle, lnSelStart)
		
	ENDPROC

	PROCEDURE getclientwindow
		*====================================================================
		* The editor only works on the editor window and you can only get the
		* HWND of this window using the Window Handle. For many Windows ope-
		* rations, however, you need the HWND of the child window that con-
		* tains the actual editor area. This function returns the HWND of
		* this window. It's not that easy, because Method snippet windows
		* actually have two child windows, one for the text editor and one
		* with the method and object dropdown combos.
		*====================================================================
		
		Lparameter tnWHandle
		
		*-----------------------------------------------------------------
		* Convert the Window Handle into a HWND
		*-----------------------------------------------------------------
		Local lnHWND
		lnHWND = _WhToHWND ( m.tnWHandle )
		
		*-----------------------------------------------------------------
		* FindWindowEx returns all child windows of a given parent window.
		* We use it to find a child of the edit window that doesn't have
		* another child window, because method edit windows have a second
		* which we can identify since it has another child window.
		*-----------------------------------------------------------------
		Local lnChild
		Declare Integer FindWindowEx In Win32API  ;
			Integer, Integer, String, String
		lnChild = 0
		Do While .T.
			lnChild = FindWindowEx ( m.lnHWND, m.lnChild, Null, Null )
			If m.lnChild == 0
				Exit
			Endif
			If FindWindowEx ( m.lnChild, 0, Null, Null ) == 0
				Exit
			Endif
		Enddo
		
		Return m.lnChild
		
	ENDPROC

	PROCEDURE getcurrentwindow
		*====================================================================
		* Returns the WHandle of the current edit window or 0, if no edit
		* window is available.
		*====================================================================
		
		Local lnWindowOnTop
		lnWindowOnTop = _WOnTop()
		If m.lnWindowOnTop <= 0
			Return 0
		Endif
		If This.GetEditSource ( m.lnWindowOnTop ) == -1
			lnWindowOnTop = 0
		Endif
		
		Return m.lnWindowOnTop
		
	ENDPROC

	PROCEDURE geteditsource
		*====================================================================
		* Determines the source of the window identified by the passed
		* WHandle. It returns the following values:
		*
		* -1     The window is not an edit window
		*  0     Command Window
		*  1     MODIFY COMMAND window
		*  2     MODIFY FILE window
		*  8     Menu Designer code window
		* 10     Method Edit Window in Class or Form Designer
		* 12     MODIFY PROCEDURE window
		*
		* This procedure uses _EdGetEnv() from the FoxTools.Fll to determine
		* the edit source. Passing an invalid handle causes an exception in
		* VFP 5 and VFP 3. In VFP 6 this raises an error 2028 (API function
		* caused an exception). Therefore we return -1 in this case, too.
		*====================================================================
		Lparameter tnWHandle
		
		Local laEnv[25], lcError, lnOK, lnSource
		lcError = On ( 'Error' )
		On Error lnOK = 0
		lnOK = _EdGetEnv ( m.tnWHandle, @laEnv )
		On Error &lcError
		If m.lnOK == 0
			lnSource = -1
		Else
			lnSource = laEnv[25]
		Endif
		
		Return m.lnSource
		
	ENDPROC

	PROCEDURE getenvironment
		Lparameters lnIndex
		
		Local laEnv[25], llResult, lnResult
		
		Try
			llResult = _EdGetEnv (This.nHandle, @laEnv)
		Catch
			llResult = -1
		EndTry 
		
		Do Case
			Case llResult = 0
				Return .F.
			Case llResult < 0
				Return llResult
			Case Pcount() = 0
				Return .T.
			Otherwise
				Return laEnv[lnIndex]
		Endcase
		
	ENDPROC

	PROCEDURE getfilesize
		Return This.GetEnvironment(2)
		
	ENDPROC

	PROCEDURE getheight
		Return _WHeightP (this.nHandle)
		
	ENDPROC

	PROCEDURE getleft
		Return _WLeftP(this.nHandle)
		
	ENDPROC

	PROCEDURE getlinenumber		&& Returns the line number given the byte offset
		* Returns the line number given the byte offset
		Lparameters lnSelStart
		
		Return _EdGetLNum(This.nHandle, lnSelStart)
		 
	ENDPROC

	PROCEDURE getlinestart
		Lparameters lnSelStart, lnLineOffset
		
		Local lnCurrentLine
		lnCurrentLine = _EdGetLNum (This.nHandle, lnSelStart)
		Return _EdGetLPos (This.nHandle, lnCurrentLine + lnLineOffset)
	ENDPROC

	PROCEDURE getopenwindows
		Local loFoxTabs AS 'foxtabsmanager' OF  'peme_foxtabsmanager.prg'
		
		loFoxTabs = NewObject('foxtabsmanager', 'peme_foxtabsmanager.prg')
		Return loFoxTabs.GetWindows()
		
	ENDPROC

	PROCEDURE getpopupcoordinates
		* gets co-ordinates for a pop-up, either at the cursor position or mouse position
		
		Lparameters tlFoxels, tlAlignToMouse
		
		If tlAlignToMouse
			loResult = This.GetMouseCoordinates()
		Else
			loResult = This.GetCaretCoordinates()
			If Type('loResult') # 'O'
				loResult = This.GetMouseCoordinates()
			Endif
		Endif
		
		If tlFoxels
			loResult.Left = This.Pix2Fox(loResult.Left, .F., _Screen.FontName, _Screen.FontSize)
			loResult.Top = This.Pix2Fox(loResult.Top, .T., _Screen.FontName, _Screen.FontSize)
		Endif
		
		Return loResult
		
	ENDPROC

	PROCEDURE getselend
		Return Max(This.GetEnvironment(17), This.GetEnvironment(18))
		
	ENDPROC

	PROCEDURE getselstart
		Return Min(This.GetEnvironment(17), This.GetEnvironment(18))
		
	ENDPROC

	PROCEDURE getstring
		Lparameters lnSelStart, lnSelEnd
		
		Return _EdGetStr (This.nHandle, lnSelStart, Min (lnSelEnd, This.GetFileSize()))
		
	ENDPROC

	PROCEDURE gettitle
		Return _Wtitle (this.nHandle)
		
	ENDPROC

	PROCEDURE gettop
		Return _WTopP (this.nHandle)
		
	ENDPROC

	PROCEDURE getwidth
		Return _WWidthP (this.nHandle)
		
	ENDPROC

	PROCEDURE getwindowhandle
		Set Library To (Home() + 'FoxTools.fll') Additive
		
		Return _WonTop ()
		
	ENDPROC

	PROCEDURE Init
		This.FindWindow()
		
	ENDPROC

	PROCEDURE movewindow
		Lparameters lnLeft, lnTop
		
		_WMoveP (This.nHandle, lnLeft, lnTop)
		
	ENDPROC

	PROCEDURE paste
		Lparameters lcClipText
		
		Local lcOld
		If Pcount() = 0
			_EdPaste (This.nHandle)
		Else
			lcOld = _Cliptext
			_Cliptext = lcClipText
			_EdPaste (This.nHandle)
			_Cliptext = lcOld
		Endif
		
	ENDPROC

	PROCEDURE resizewindow
		Lparameters lnWidth, lnHeight
		
		_WSizeP (This.nHandle, lnWidth, lnHeight)
		
	ENDPROC

	PROCEDURE select
		Lparameters lnSelStart, lnSelEnd
		_EdSelect (This.nHandle, lnSelStart, IIF('N' = Vartype(lnSelEnd), lnSelEnd, lnSelStart)) 
		
	ENDPROC

	PROCEDURE selectwindow
		Lparameters lnHandle
		
		Local llSuccess 
		Try
			_WSelect (lnHandle)
			llSuccess = .T.
		Catch
			llSuccess = .F.
		Endtry
		
	ENDPROC

	PROCEDURE sethandle
		Lparameters lnHandle
		This.nHandle = lnHandle
	ENDPROC

	PROCEDURE setinsertionpoint		&& Moves the insertion point to a given offset (not necessarily visible)
		* Moves the insertion point to a given offset (and makes it visible)
		Lparameters lnPosition
		
		_EdSetPos (This.nHandle, lnPosition)
		_EdStoPos (This.nHandle, lnPosition, .T.)
		
	ENDPROC

	PROCEDURE settitle
		Lparameters lcNewName
		_WSetTitle (This.nHandle, lcNewName)
		
	ENDPROC

	PROCEDURE showposition
		Lparameters tlScroll
		
		_EdStoSel (This.nHandle, tlScroll)
	ENDPROC

	PROCEDURE skipline
		Lparameters lnSelStart, lnLines
		
		Return _EdSkipLin (This.nHandle, lnSelStart, lnLines)
		
	ENDPROC

	PROCEDURE winshow
		_WSelect(This.nHandle)
		
	ENDPROC

ENDDEFINE
