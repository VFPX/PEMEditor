*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_foxmatch.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS matchclass AS matchengine OF "peme_foxmatch.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: oregexp
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "matchclass"
		oregexp = .NULL.
		_memberdata = <VFPData>
			<memberdata name="oregexp" display="oRegExp"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Init
		Local loRegExp As 'VBScript.RegExp'
		
		DoDefault()
		
		loRegExp = Createobject ('VBScript.RegExp')
		With loRegExp
			.IgnoreCase	= .T.
			.Global		= .T.
			.MultiLine	= .T.
		Endwith
		
		This.oRegExp = loRegExp
	ENDPROC

	PROCEDURE searchfor
		Local lcClass, lcExt, lcParent, lcParentLoc, lcText, lcValue, lnEndRange, lnI, lnStartRange, loMatch
		Local loMatches, ltTimeStamp
		
		lcExt = Upper(Justext(This.FileName))
		
		Do Case
			Case lcExt = 'VCX'
		
				Select (Select('VCX'))
				Use (This.FileName) Shared Again Alias VCX
		
				Scan For Lower(Reserved1) = 'class' And Not Deleted()
					If Empty(This.SearchBaseClass) Or Lower(BaseClass) = This.SearchBaseClass
						If Empty (This.ClassSearch) Or Lower (This.ClassSearch) $ Lower(objname)
							If (Not This.ClassExactMatch) Or Lower (This.ClassSearch) == Lower(objname)
		
								This.AddMatch (This.DecodeTimeStamp(Timestamp), objname, Class, ClassLoc, BaseClass)
		
							Endif
						Endif
					Endif
				Endscan
		
				Use
		
			Case lcExt = 'PRG'
				lcText				 = Filetostr(This.FileName)
				This.oRegExp.Pattern = '^s*define class.*$'
				loMatches			 = This.oRegExp.Execute(lcText)
		
				ltTimeStamp = Fdate(This.FileName, 1)
		
				If loMatches.Count = 0
					Return
				Endif
		
				For lnI = 1 To loMatches.Count
					loMatch		 = loMatches.Item[lnI - 1]
		
					lcValue		= loMatch.Value
					lcClass		= Getwordnum(lcValue, 3)
					lcParent	= Getwordnum(lcValue, 5)
					lcParentLoc	= Getwordnum(lcValue, 7)
		
					If Empty (This.ClassSearch) Or Lower (This.ClassSearch) $ Lower(lcClass)
						If (Not This.ClassExactMatch) Or Lower (This.ClassSearch) == Lower(lcClass)
		
							lnStartRange = loMatch.FirstIndex + At(lcClass, lcValue)
							lnEndRange	 = lnStartRange + Len(lcClass)
		
							This.AddMatch (ltTimeStamp, lcClass, lcParent, lcParentLoc, '', lnStartRange, lnEndRange)
						Endif
					Endif
				Endfor && lnI = 1 to loMatches.Count
		
		Endcase
		
	ENDPROC

ENDDEFINE

DEFINE CLASS matchdefault AS matchengine OF "peme_foxmatch.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Name = "matchdefault"
	*</PropValue>
	
	PROCEDURE searchfor
		This.AddMatch()
	ENDPROC

ENDDEFINE

DEFINE CLASS matchengine AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addmatch
		*m: classsearch_assign
		*m: decodetimestamp
		*m: getclassfilename
		*m: searchbaseclass_assign
		*m: searchfor
		*p: classexactmatch
		*p: classsearch
		*p: filename
		*p: searchbaseclass
		*p: searchtype
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		classexactmatch = .F.
		classsearch = 
		filename = 
		Name = "matchengine"
		searchbaseclass = 
		searchtype = 
		_memberdata = <VFPData>
			<memberdata name="addmatch" display="AddMatch"/>
			<memberdata name="classsearch_assign" display="ClassSearch_Assign"/>
			<memberdata name="decodetimestamp" display="DecodeTimeStamp"/>
			<memberdata name="getclassfilename" display="GetClassFileName"/>
			<memberdata name="searchbaseclass_assign" display="SearchBaseClass_Assign"/>
			<memberdata name="searchfor" display="SearchFor"/>
			<memberdata name="classexactmatch" display="ClassExactMatch"/>
			<memberdata name="classsearch" display="ClassSearch"/>
			<memberdata name="filename" display="FileName"/>
			<memberdata name="name" display="Name"/>
			<memberdata name="searchbaseclass" display="SearchBaseClass"/>
			<memberdata name="searchtype" display="SearchType"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE addmatch
		LPARAMETERS ttTimeStamp, tcClass, tcParentClass, tcClassLoc, tcBaseClass, tnStartRange, tnEndRange
		
		ltTimeStamp	  = Evl (ttTimeStamp, Fdate (This.FileName, 1))
		lcClass		  = Evl (tcClass, '')
		lcParentClass = Evl (tcParentClass, '')
		If Empty (Evl (tcClassLoc, ''))
			lcClassLoc		= ''
		Else
			lcClassLoc		= This.GetClassFileName(tcClassLoc, This.FileName)
		Endif
		lcBaseClass		= Evl (tcBaseClass, '')
		
		Insert Into ResultsTable	(			;
			  SearchType,						;
			  FullName,							;
			  Class,							;
			  Folder,							;
			  FileName,							;
			  Parent,							;
			  ClassLoc,							;
			  BaseClass,						;
			  Timestamp,						;
			  StartRange,						;
			  EndRange							;
			  )									;
			Values								;
			(									;
			  This.SearchType,					;
			  This.FileName,					;
			  lcClass,							;
			  Justpath(This.FileName),			;
			  Justfname(This.FileName),			;
			  lcParentClass,					;
			  lcClassLoc,						;
			  lcBaseClass,						;
			  ltTimeStamp,						;
			  Evl(tnStartRange, 0),				;
			  Evl(tnEndRange, 0)				;
			  )
	ENDPROC

	PROCEDURE classsearch_assign
		LPARAMETERS lcNewValue
		This.ClassSearch = Alltrim (Lower (lcNewValue))
	ENDPROC

	PROCEDURE decodetimestamp
		LPARAMETERS nTimestamp
		
		Local nDate, nDay, nHr, nMin, nMonth, nSec, nTime, nYear
		
		nDate = Bitrshift(nTimestamp, 16)
		nTime = Bitand(nTimestamp, 2^16 - 1)
		
		nYear  = Bitand(Bitrshift(nDate, 9), 2^8 - 1) + 1980
		nMonth = Bitand(Bitrshift(nDate, 5), 2^4 - 1)
		nDay   = Bitand(nDate, 2^5 - 1)
		
		nHr	 = Bitand(Bitrshift(nTime, 11), 2^5 - 1)
		nMin = Bitand(Bitrshift(nTime, 5), 2^6 - 1)
		nSec = Bitand(nTime, 2^5 - 1)
		
		Return Datetime(nYear, nMonth, nDay, nHr, nMin, nSec)
		
	ENDPROC

	PROCEDURE getclassfilename
		Lparameters tcClassLoc, tcPath
		
		*** JRN 02/24/2009 : per Doug ... handles cases of absolute paths and relative to current directory
		
		Do Case
			Case ':' $ tcClassLoc
				Return tcClassLoc
		
			Case File( Fullpath( m.tcClassLoc, m.tcPath ) )
				Return Fullpath(tcClassLoc, tcPath)
		
			Otherwise
				Return Fullpath( m.tcClassLoc )
		Endcase
		
	ENDPROC

	PROCEDURE searchbaseclass_assign
		LPARAMETERS lcNewValue
		If lcNewValue = '<'
			This.SearchBaseClass = ''
		Else
			This.SearchBaseClass = Alltrim (Lower (lcNewValue))
		Endif
	ENDPROC

	PROCEDURE searchfor
		Return .T.
	ENDPROC

ENDDEFINE
