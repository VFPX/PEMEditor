*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_main.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS pemeditor_main AS basecustom OF "peme_basecontrols.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "editpropertydialog.h"
	*<DefinedPropArrayMethod>
		*m: extractparameters
		*m: extractsnippetparameters
		*m: transferoldpreferences
		*p: capplicationpath
		*p: oeditorwin
		*p: oprefs
		*p: otools
		*p: outils
	*</DefinedPropArrayMethod>

	*<PropValue>
		capplicationpath = 
		lreleaseondestroy = .T.
		Name = "pemeditor_main"
		oeditorwin = .NULL.
		oprefs = .NULL.
		otools = .NULL.
		outils = .NULL.
		_memberdata = <VFPData>
			<memberdata name="capplicationpath" display="cApplicationPath"/>
			<memberdata name="oeditorwin" display="oEditorWin"/>
			<memberdata name="addmrufile" display="AddMRUFile"/>
			<memberdata name="extractparameters" display="ExtractParameters"/>
			<memberdata name="extractsnippetparameters" display="ExtractSnippetParameters"/>
			<memberdata name="showhelp" display="ShowHelp"/>
			<memberdata name="transferoldpreferences" display="TransferOldPreferences"/>
			<memberdata name="oprefs" display="oPrefs"/>
			<memberdata name="getmrulist" display="GetMRUList"/>
			<memberdata name="diskfilename" display="DiskFileName"/>
			<memberdata name="getrelativepath" display="GetRelativePath"/>
			<memberdata name="showerrormsg" display="ShowErrorMsg"/>
			<memberdata name="striptabs" display="StripTabs"/>
			<memberdata name="isnamechar" display="IsNameChar"/>
			<memberdata name="getcontrolcount" display="GetControlCount"/>
			<memberdata name="getpemstatus" display="GetPEMStatus"/>
			<memberdata name="editsourcex" display="EditSourceX"/>
			<memberdata name="openurl" display="OpenURL"/>
			<memberdata name="otools" display="oTools"/>
			<memberdata name="outils" display="oUtils"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE extractparameters
		Lparameters lcString, lcDelimiter
		
		Local loResult As 'Collection'
		Local lcChar, lcLastChar, lnMatch, lnParenLevel, lnPos, lnStartCurrent
		
		loResult	   = Createobject ('Collection')
		lnStartCurrent = 1
		lnParenLevel   = 0
		
		For lnPos = 1 To Len (lcString)
			lcChar = Substr (lcString, lnPos, 1)
			Do Case
				Case lcChar = lcDelimiter And lnParenLevel = 0
					loResult.Add (Substr (lcString, lnStartCurrent, lnPos - lnStartCurrent))
					lnStartCurrent = lnPos + 1
				Case lcChar = '('
					lnParenLevel = lnParenLevel + 1
				Case lcChar = ')'
					lnParenLevel = lnParenLevel - 1
				Case lcChar $ ['"]
					lnMatch	= At (lcChar, Substr (lcString, lnPos + 1))
					lnPos	= lnPos + Evl (lnMatch, 10000) && move our pointer
				Case lcChar = '['
					lcLastChar = Right (' ' + Trim (Left (lcString, lnPos - 1)), 1)
					If This.IsNameChar (lcLastChar)
						lnParenLevel = lnParenLevel + 1
					Else
						lnMatch	= At (']', Substr (lcString, lnPos + 1))
						lnPos	= lnPos + Evl (lnMatch, 10000) && move our pointer
					Endif
				Case lcChar = ']'
					lnParenLevel = lnParenLevel - 1
			Endcase
		Endfor
		
		loResult.Add (Substr  (lcString, lnStartCurrent))
		
		Return loResult
		
		
		
	ENDPROC

	PROCEDURE extractsnippetparameters
		Lparameters lcParameters, lcDelimiter_Char, lcSnippet_Keyword, lnMin_Parameters, lnMax_Parameters
		
		* do the work
		Local lcParams, lnI, loParams
		
		Do Case
			Case 0 = Len (lcDelimiter_Char)
				Return ['] + Strtran (Alltrim (lcParameters), ['], [' + "'" + ']) + [']
		
			Case Empty (lcParameters)
				If Not Between (0, lnMin_Parameters, lnMax_Parameters)
					Messagebox ('Incorrect number of parameters for ' + lcSnippet_Keyword, 16)
					Return .T. && we tried to handle it, but couldn't; leave Snippet alone
				Endif
				Return ''
		
			Otherwise
				loParams = This.ExtractParameters (lcParameters, lcDelimiter_Char)
				If Not Between (loParams.Count, lnMin_Parameters, lnMax_Parameters)
					Messagebox ('Incorrect number of parameters for ' + lcSnippet_Keyword, 16)
					Return .T. && we tried to handle it, but couldn't; leave Snippet alone
				Endif
		
				lcParams = ['] + Strtran (Alltrim (loParams.Item(1)), ['], [' + "'" + ']) + [']
				For lnI = 2 To loParams.Count
					lcParams = lcParams + [, '] + Strtran (Alltrim (loParams.Item (lnI)), ['], [' + "'" + ']) + [']
				Endfor
		
				Return lcParams
		Endcase
		
	ENDPROC

	PROCEDURE Init
		#Include PemEditorVersion.h
		
		Local lcApplicationPath, lcMyPath, lcSnippetPath
		
		With This
		
			lcMyPath		  = .ClassLibrary
			.cApplicationPath = Addbs (Justpath (Justpath (lcMyPath)))
		
			.TransferOldPreferences()
		
			.oPrefs			 = Newobject ('PEME_Preferences', 	'Source\PEME_Preferences.VCX', 		''	;
				  , ccPEMEVERSION)
		
			.oEditorWin		 = Newobject ('EditorWin', 			'Source\PEME_EditorWin.VCX', 		''	)
		
			.oUtils			 = Newobject ('PEMEditor_Utils', 	'Source\PEME_Utils.VCX', 			''	;
				  , .cApplicationPath, .oPrefs, .oEditorWin)
		
			.oTools			 = Newobject ('PEMEditor_Tools', 	'Source\PEME_Tools.VCX', 			''	;
				  , .oUtils, .oEditorWin)
		
			****************************************************************
		
		Endwith
		
		
	ENDPROC

	PROCEDURE transferoldpreferences
		
		Local loNewPrefs As 'peme_basepreferences' Of  'Source\Peme_Preferences.VCX'
		Local loPrefs As 'peme_basepreferences' Of  'Source\Peme_Preferences.VCX'
		Local lcNewName, lcOldName, lnI, lxValue, lcFavorites
		Local Array aOptions(1), laFavorites(1)
		
		loPrefs	 = Newobject ('peme_basepreferences', 	'Source\Peme_Preferences.VCX', '')
		If loPrefs.OpenResource()
			If 0 # Reccount('FoxResource')
				Locate For Upper(Name) = Upper('Settings')
				If Not Found()
					Use (This.cApplicationPath + '\Tables\OptionNames') In 0 Alias OptionNames
					Select * 						;
						from FoxResource			;
						where (Not Empty(Id)) And Upper(Name) # Upper('EditPMPreferences');
						into Cursor crsr_Resource
		
					Scan
						loNewPrefs = Newobject ('peme_basepreferences', 	'Source\Peme_Preferences.VCX', '')
						Restore From Memo Data Additive
						lcFavorites = CR
						For lnI = 1 To Alen(aOptions,1)
							lcOldName = aOptions(lnI,1)
							lxValue = aOptions(lnI,2)
							If Indexseek(Upper(lcOldName), .T., 'OptionNames', 'OptionName')
								lcNewName = Alltrim(OptionNames.NewName)
								loNewPrefs.AddProperty(lcNewName, lxValue)
							Endif
							If Upper(lcOldName) = 'FAVORITE' And 'C' = Vartype(lxValue)
								ALines(laFavorites, Lower(lxValue + '||'), .T., '|')
								lcFavorites = lcFavorites + Trim(laFavorites(1)) + IIF(Empty(laFavorites(2)), '', '|' + laFavorites(2)) + CR
							Endif
						Endfor
						loNewPrefs.AddProperty('cFavorites', lcFavorites)
						loNewPrefs.SaveValues(crsr_Resource.Id, 'Settings')
						If crsr_Resource.Id = 'NEWEDITPROPD'
							loNewPrefs.SaveValues('Main', 'Preferences')
						Endif
						loNewPrefs = .Null.
					Endscan
				Endif
			Endif
		
			*!*		loPrefs.OpenResource()
			*!*		Select FoxResource
			*!*		Delete For Not InList(Name, 'Settings', 'Preferences')
			loPrefs.CloseResource()
		Endif
		
		
	ENDPROC

ENDDEFINE
